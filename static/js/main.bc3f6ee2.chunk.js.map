{"version":3,"sources":["Components/Tiles.js","Components/TileMap.js","Components/TileForm.js","Components/TilePalette.js","Components/RegionViewer.js","Components/ToolPanel.js","App.js","serviceWorker.js","index.js"],"names":["TextTile","Component","_Component2","props","_this2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","handleUpdateTile","x","y","handleMouseOver","mouse_down","setState","fill","handleMouseOut","color","state","character","inherits","createClass","key","value","react_default","a","createElement","ReactKonva","text","fontSize","align","verticalAlign","width","tile_size","height","onClick","onMouseOver","onMouseOut","TileMap","_this","tiles","Array","cols","rows","type","col","row","c","r","tile","getTile","push","Tiles_TextTile","concat","bind","selected_tile","className","onMouseDown","handleMouseDown","onMouseUp","handleMouseUp","drawTiles","map","TileForm","handleChange","name","event","defineProperty","target","tile_label","tile_character","tile_color","tile_data","new_tile","label","data","objectSpread","handleAddTile","TextField_default","id","defaultValue","onChange","margin","variant","InputProps","startAdornment","InputAdornment_default","position","placeholder","multiline","Button_default","onSubmit","TilePlate","_ref","handleSwapSelectedTile","handleRemoveTile","aria-label","TilePalette","owner","form_is_visible","index","TilePalette_TilePlate","toConsumableArray","tile_id","length","filter","drawTilePlates","handleToggleForm","Components_TileForm","RegionViewer","ToolPanel","AppBar_default","Tabs_default","Tab_default","Components_TilePalette","Components_RegionViewer","App","selected_tile_properties","console","log","Grid_default","container","spacing","item","xs","sm","Components_TileMap","tile_gutter","Components_ToolPanel","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc3f6ee2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Konva from \"konva\";\nimport { Rect, Text } from \"react-konva\";\n\nexport class ColoredRect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: \"black\"\n    };\n  }\n\n  handleClick = () => {\n    this.setState({\n      color: Konva.Util.getRandomColor()\n    });\n  };\n\n  render() {\n    return (\n      <Rect\n        x={this.props.x}\n        y={this.props.y}\n        width={this.props.tile_size - this.props.tile_gutter}\n        height={this.props.tile_size - this.props.tile_gutter}\n        fill={this.state.color}\n        onClick={this.handleClick}\n      />\n    );\n  }\n}\n\nexport class TextTile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      character: props.character,\n      fill: props.color,\n    };\n  }\n\n  handleClick = () => {\n    this.props.handleUpdateTile(this.props.x, this.props.y)\n  };\n\n  handleMouseOver = () => {\n    let new_state = {\n      fill: 'red',\n    }\n    if (this.props.mouse_down) {\n      this.props.handleUpdateTile(this.props.x, this.props.y)\n    }\n    this.setState(new_state);\n  };\n\n  handleMouseOut = () => {\n    this.setState({\n      fill: this.props.color\n    });\n  };\n\n  render() {\n    return (\n      <Text\n        text={this.props.character}\n        fill={this.state.fill}\n        x={this.props.x}\n        y={this.props.y}\n        fontSize={16}\n        align='center'\n        verticalAlign='middle'\n        width={this.props.tile_size}\n        height={this.props.tile_size}\n        onClick={this.handleClick}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n      />\n    );\n  }\n}","import React, { Component } from \"react\";\nimport { Stage, Layer } from \"react-konva\";\nimport * as Tiles from './Tiles.js';\n\nclass TileMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tiles: new Array(props.cols * props.rows).fill({type: 0, character: '.', color:'white'}),\n      mouse_down: false,\n    };\n  }\n\n  getTile (col, row) {\n    return this.state.tiles[row * this.props.cols + col]\n  }\n\n  drawTiles () {\n    let tiles = [];\n    for (let c = 0; c < this.props.cols; c++) {\n      for (let r = 0; r < this.props.rows; r++) {\n        let tile = this.getTile(c, r);\n        tiles.push(\n          <Tiles.TextTile\n            key={`${c}-${r}`}\n            x={c * this.props.tile_size}\n            y={r * this.props.tile_size}\n            character={tile.character}\n            color={tile.color}\n            tile_size={this.props.tile_size}\n            mouse_down={this.state.mouse_down}\n            handleUpdateTile={this.handleUpdateTile.bind(this)}\n          />\n        )\n      }\n    }\n    \n    return tiles;\n  }\n\n  handleUpdateTile (x, y) {\n    const col = x / this.props.tile_size;\n    const row = y / this.props.tile_size;\n    let tiles = this.state.tiles;\n    tiles[row * this.props.cols + col] = {\n      type: 1,\n      character: this.props.selected_tile.character,\n      color: this.props.selected_tile.color,\n    };\n\n    this.setState({tiles});\n  }\n\n  handleMouseDown () {\n    this.setState({mouse_down: true})\n  }\n\n  handleMouseUp () {\n    this.setState({mouse_down: false})\n  }\n\n  render() {\n    return (\n      <div className='TileMap'>\n        <Stage \n          width={this.props.cols * this.props.tile_size} \n          height={this.props.rows * this.props.tile_size}\n          onMouseDown={this.handleMouseDown.bind(this)} \n          onMouseUp={this.handleMouseUp.bind(this)}\n        >\n          <Layer>\n            {\n              this.drawTiles().map((tile) => {\n                return tile;\n              })\n            }\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n}\n\nexport default TileMap;\n","import React, { Component } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\n\nclass TileForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tile_label: '',\n      tile_character: '',\n      tile_color: '',\n      tile_data: '',\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  onSubmit () {\n    let new_tile = {\n      label: this.state.tile_label,\n      character: this.state.tile_character,\n      color: this.state.tile_color,\n      data: {...this.state.tile_data},\n    }\n    \n    this.props.handleAddTile(new_tile);\n  }\n\n  render() {\n    return (\n      <div className='TileForm'>\n        <div className='form row'>\n          <TextField\n            id=\"tile-label\"\n            label=\"Label\"\n            className={'text-field'}\n            defaultValue={this.state.tile_label}\n            onChange={this.handleChange('tile_label')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <TextField\n            id=\"tile-character\"\n            label=\"Character\"\n            className={'text-field'}\n            defaultValue={this.state.tile_character}\n            onChange={this.handleChange('tile_character')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <TextField\n            id=\"tile-color\"\n            label=\"Hex Color\"\n            className={'text-field'}\n            defaultValue={this.state.tile_color}\n            onChange={this.handleChange('tile_color')}\n            margin=\"normal\"\n            variant=\"outlined\"\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\">#</InputAdornment>,\n            }}\n          />\n          <TextField\n            id=\"tile-data\"\n            label=\"Data\"\n            placeholder='{\n              type: tree\n            }'\n            multiline\n            defaultValue={this.state.tile_data}\n            onChange={this.handleChange('tile_data')}\n            className={'text-field'}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <Button \n            variant=\"outlined\" \n            color=\"primary\" \n            className='btn-full-width'\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n            </i>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TileForm;","import React, { Component } from \"react\";\nimport TileForm from './TileForm';\nimport Button from '@material-ui/core/Button';\n\nconst TilePlate = ({id, label, color, character, data, handleSwapSelectedTile, handleRemoveTile}) => (\n  <div className='TilePlate'>\n    <Button \n      variant=\"contained\" \n      color=\"primary\"\n      onClick={() => {\n        handleSwapSelectedTile({character, color, data})\n      }}\n    >\n      {label}\n    </Button>\n    <Button \n      color=\"secondary\" \n      aria-label=\"remove tile\"\n      onClick={() => {handleRemoveTile(id)}}\n    >\n      <i className=\"material-icons\">\n        delete\n      </i>\n    </Button>\n  </div>\n)\n\nclass TilePalette extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tiles: [\n        {\n          id: 1,\n          label: 'land',\n          color: '#298',\n          character: 'L',\n          data: {type: 'province', owner: 'Oda'}\n        }\n      ],\n      form_is_visible: false,\n    };\n  }\n\n  drawTilePlates () {\n    return this.state.tiles.map((tile, index) => {\n      return (\n        <TilePlate \n          key={index}\n          id={tile.id}\n          label={tile.label}\n          color={tile.color}\n          character={tile.character}\n          data={{...tile.data}}\n          handleSwapSelectedTile={this.props.handleSwapSelectedTile}\n          handleRemoveTile={this.handleRemoveTile.bind(this)}\n        />\n      )\n    })\n  }\n\n  handleToggleForm () {\n    this.setState({form_is_visible: !this.state.form_is_visible})\n  }\n\n  handleAddTile (new_tile) {\n    let tiles = [...this.state.tiles];\n    let next_id = tiles.length > 0 ? tiles[tiles.length - 1].id + 1 : 1;\n    let tile_id = {id: next_id};\n    tiles.push({...tile_id, ...new_tile});\n    this.setState({\n      tiles,\n      form_is_visible: false,\n    })\n  }\n\n  handleRemoveTile (id) {\n    let tiles = this.state.tiles.filter((tile) => tile.id !== id);\n    this.setState({tiles});\n  }\n\n  render() {\n    return (\n      <div className=\"TilePalette tool-pane\">\n        <h4>Palette</h4>\n        {this.drawTilePlates()}\n        <br />\n        <Button \n          variant=\"outlined\" \n          color=\"default\" \n          className='btn-full-width'\n          onClick={this.handleToggleForm.bind(this)}\n        >\n          {\n            (this.state.form_is_visible)\n            ? (\n                <i className=\"material-icons\">\n                  close\n                </i>\n            )\n            : (\n                <i className=\"material-icons\">\n                  add\n                </i>\n            )\n          }\n        </Button>\n        {\n          this.state.form_is_visible && <TileForm handleAddTile={this.handleAddTile.bind(this)}/>\n        }\n      </div>\n    );\n  }\n}\n\nexport default TilePalette;","import React, { Component } from \"react\";\n\nclass RegionViewer extends Component {\n  render() {\n    return (\n      <div className=\"RegionViewer tool-pane\">\n        <h4>Regions</h4>\n      </div>\n    );\n  }\n}\n\nexport default RegionViewer;","import React, { Component } from \"react\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport TilePalette from './TilePalette';\nimport RegionViewer from './RegionViewer';\n\nclass ToolPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0,\n    };\n  }\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  render() {\n    return (\n      <div className=\"ToolPanel\">\n        <AppBar className='tool-tabs' position=\"static\">\n          <Tabs variant=\"fullWidth\" value={this.state.value} onChange={this.handleChange}>\n            <Tab label=\"Palette\" />\n            <Tab label=\"Regions\" />\n          </Tabs>\n        </AppBar>\n        {/* {this.state.value === 0 && <TilePalette handleSwapSelectedTile={this.props.handleSwapSelectedTile}/>}\n        {this.state.value === 1 && <RegionViewer />} */}\n        <span className={this.state.value === 0 ? '' : 'hidden'}>\n          <TilePalette handleSwapSelectedTile={this.props.handleSwapSelectedTile}/>\n        </span>\n        <span className={this.state.value === 1 ? '' : 'hidden'}>\n          <RegionViewer />\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default ToolPanel;","import React, { Component } from 'react';\nimport './App.scss';\nimport TileMap from './Components/TileMap';\nimport ToolPanel from './Components/ToolPanel';\nimport Grid from '@material-ui/core/Grid';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      selected_tile: {\n        character: '#',\n        color: '#fff',\n        data: null,\n      },\n    }\n  }\n\n  handleSwapSelectedTile (selected_tile_properties) {\n    this.setState({selected_tile: selected_tile_properties}, console.log(this.state.selected_tile)\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"center\">Total War Demake</h1>\n        <Grid container spacing={24}>\n          <Grid item xs={12} sm={8}>\n            <TileMap\n              cols={40}\n              rows={40}\n              tile_size={32}\n              tile_gutter={8}\n              selected_tile={{...this.state.selected_tile}}\n            />\n          </ Grid>\n          <Grid item xs={12} sm={4}>\n            <ToolPanel handleSwapSelectedTile={this.handleSwapSelectedTile.bind(this)} />\n          </ Grid>\n        </ Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}