{"version":3,"sources":["Components/JsonView.js","Components/Tiles.js","Components/TileMap.js","Components/TileForm.js","Components/TilePreview.js","Components/TilePalette.js","Components/LayerForm.js","Components/Layers.js","Components/RegionViewer.js","Components/Settings.js","Components/ToolPanel.js","Components/Toolbar.js","Components/SaveList.js","App.js","serviceWorker.js","index.js"],"names":["JsonView","_ref","cols","rows","tiles","react_default","a","createElement","className","Grid_default","container","spacing","item","xs","sm","Button_default","color","variant","aria-label","onClick","document","getElementById","select","execCommand","TextField_default","id","label","multiline","fullWidth","rowsMax","value","JSON","stringify","margin","TextTile","Component","_Component2","props","_this2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","onUpdateTile","x","y","handleMouseOver","mouse_down","setState","is_hovering","handleMouseOut","state","character","fill","hover_fill","viewing_offset","viewing_size_increase","inherits","createClass","key","obj_for_view","data","is_viewing","viewed_tile","tile","ReactKonva","width","tile_size","height","text","fontSize","align","verticalAlign","onMouseOver","onMouseOut","TileMap","_this","col","row","Array","map","empty","c","r","getTile","Tiles_TextTile","concat","handleUpdateTile","bind","prev_tile","new_tile","current_tile","parse","floodFillUtil","tool_in_use","type","selected_tile","objectSpread","empty_tile","floodFill","onUpdateTiles","onMouseDown","handleMouseDown","onMouseUp","handleMouseUp","drawTiles","TileForm","handleChange","name","event","defineProperty","target","tile_to_edit","editing_tile_id","filter","tile_label","tile_character","tile_color","tile_data","hex","e","handleEditTile","handleAddTile","defaultValue","onChange","lib","onChangeComplete","handleColorChange","placeholder","onSubmit","TilePreview","style","TilePlate","can_view","handleSwapSelectedTile","handleSwapViewedTile","handleCloseForm","handleRemoveTile","handleToggleEdit","view_action","str_data","TilePalette","owner","form_is_visible","index","TilePalette_TilePlate","viewed_tile_id","_this3","toConsumableArray","tile_id","length","drawTilePlates","Components_TilePreview","handleToggleForm","Components_TileForm","LayerForm","layer_name","new_layer","handleAddLayer","LayerPlate","layer","is_editing","handleEditLayer","toggleEdit","handleSwapLayer","deletable","handleRemoveLayer","Layers","layers","current_layer","Layers_LayerPlate","Components_LayerForm","Settings","handleGridChange","new_size","parseInt","grid_min","grid_max","push","onUpdateGridSize","Grow_default","in","ToolPanel","AppBar_default","position","Tabs_default","Tab_default","Components_TilePalette","Components_Layers","Components_Settings","Toolbar","_Component","can_hotkey","Tooltip_default","title","onToolSwitch","disabled","onUndo","tile_history_index","tile_history","onRedo","SaveList","saves","onDeleteSave","onLoadSave","save","timestamp","toString","App","localStorage","getItem","local_storage_key","show_saves","default_cols","default_rows","tile_gutter","tile_history_max","selected_tile_properties","slice","next_id","local_saves","new_save","Date","setItem","error","alert","new_state","handleToggleSaves","remaining_saves","HashRouter","Toolbar_default","window","location","Components_Toolbar","handleToolSwitch","handleUndo","handleRedo","handleSaveStateToLocalStorage","Components_SaveList","handleLoadStateFromLocalStorage","handleDeleteStateFromLocalStorage","es","atEnter","opacity","atLeave","atActive","Route","exact","path","render","Components_TileMap","handleUpdateTiles","Components_ToolPanel","handleUpdateGridSize","Components_JsonView","Boolean","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24a0f343.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\n\n\nconst JsonView = ({ cols, rows, tiles }) => (\n  <div className='JsonView'>\n    <Grid container spacing={24}>\n      <Grid item xs={12} sm={4}>\n        <Button\n          color=\"primary\"\n          variant='contained'\n          aria-label=\"copy\"\n          onClick={() => { \n            document.getElementById('json-export-data').select();\n            document.execCommand(\"copy\");\n          }}\n        >\n          Copy to Clipboard \n        </Button>\n      </Grid>\n      <Grid item xs={12} sm={8}>\n        <TextField\n          id=\"json-export-data\"\n          label=\"Json\"\n          multiline\n          fullWidth\n          rowsMax=\"8\"\n          value={JSON.stringify({\n            cols, rows, tiles\n          })}\n          margin=\"normal\"\n          variant=\"outlined\"\n        />\n      </Grid>\n    </Grid>\n  </div>\n);\n\nexport default JsonView;","import React, { Component } from \"react\";\nimport Konva from \"konva\";\nimport { Rect, Text, Group } from \"react-konva\";\n\nexport class ColoredRect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: \"black\"\n    };\n  }\n\n  handleClick = () => {\n    this.setState({\n      color: Konva.Util.getRandomColor()\n    });\n  };\n\n  render() {\n    return (\n      <Rect\n        x={this.props.x}\n        y={this.props.y}\n        width={this.props.tile_size - this.props.tile_gutter}\n        height={this.props.tile_size - this.props.tile_gutter}\n        onClick={this.handleClick}\n      />\n    );\n  }\n}\n\nexport class TextTile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      character: props.character,\n      fill: props.color,\n      hover_fill: 'red',\n      is_hovering: false,\n      viewing_offset: -16,\n      viewing_size_increase: 8,\n    };\n  }\n\n  handleClick = () => {\n    this.props.onUpdateTile(this.props.x, this.props.y)\n  };\n\n  handleMouseOver = () => {\n    let new_state = {\n      is_hovering: true,\n    }\n    if (this.props.mouse_down) {\n      this.props.onUpdateTile(this.props.x, this.props.y)\n    }\n    \n    this.setState(new_state);\n  };\n\n  handleMouseOut = () => {\n    this.setState({\n      is_hovering: false,\n    });\n  };\n\n  render() {\n    const obj_for_view = { character: this.props.character, color: this.props.color, data: this.props.data };\n    const is_viewing = this.props.viewed_tile === JSON.stringify(obj_for_view);\n    const viewing_offset = is_viewing * this.state.viewing_offset;\n    const viewing_size_increase = is_viewing * this.state.viewing_size_increase;\n\n    const tile = is_viewing \n    ? (\n        <Rect\n          x={this.props.x}\n          y={this.props.y}\n          width={this.props.tile_size}\n          height={this.props.tile_size}\n          fill={this.props.color}\n        />\n    )\n    : (\n      <Text\n        text={this.props.character}\n        fill={this.state.is_hovering ? this.state.hover_fill: this.props.color}\n        x={this.props.x + viewing_offset}\n        y={this.props.y + viewing_offset}\n        fontSize={16 + viewing_size_increase}\n        align='center'\n        verticalAlign='middle'\n        width={this.props.tile_size}\n        height={this.props.tile_size}\n        onClick={this.handleClick}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n      />\n    )\n    return (\n      <Group>\n        {tile}\n      </Group>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport { Stage, Layer } from \"react-konva\";\nimport * as Tiles from './Tiles.js';\n\nclass TileMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mouse_down: false,\n    };\n  }\n\n  getTile (col, row) {\n    return this.props.tiles[row * this.props.cols + col]\n  }\n\n  drawTiles () {\n    let tiles = new Array(this.props.cols).fill(null).map((empty, c) => {\n      return new Array(this.props.rows).fill(null).map((empty, r) => {\n        let tile = this.getTile(c, r);\n        const is_viewing = false;\n        \n        return (\n          <Tiles.TextTile\n            key={`${c}-${r}`}\n            is_viewing={is_viewing}\n            viewed_tile={this.props.viewed_tile}\n            x={c * this.props.tile_size}\n            y={r * this.props.tile_size}\n            character={tile.character}\n            color={tile.color}\n            data={tile.data}\n            tile_size={this.props.tile_size}\n            mouse_down={this.state.mouse_down}\n            onUpdateTile={this.handleUpdateTile.bind(this)}\n          />\n        )\n      })\n    })\n    return tiles;\n  }\n\n  floodFillUtil (cols, rows, tiles, x, y, prev_tile, new_tile)\n  {\n    let current_tile = tiles[y * cols + x];\n    // Base cases \n    if (x < 0 || x >= cols || y < 0 || y >= rows) { return tiles; }\n    if (JSON.stringify(current_tile) !== JSON.stringify(prev_tile)) { return tiles; }\n    \n    // Replace the color at (x, y) \n    tiles[y * cols + x] = JSON.parse(JSON.stringify(new_tile));\n    \n    // Recur for north, east, south and west \n    this.floodFillUtil(cols, rows, tiles, x + 1, y, prev_tile, new_tile);\n    this.floodFillUtil(cols, rows, tiles, x - 1, y, prev_tile, new_tile);\n    this.floodFillUtil(cols, rows, tiles, x, y + 1, prev_tile, new_tile);\n    this.floodFillUtil(cols, rows, tiles, x, y - 1, prev_tile, new_tile);\n\n    return tiles;\n  }\n\n  // It mainly finds the previous color on (x, y) and \n  floodFill (cols, rows, tiles, x, y, new_tile)\n  {\n    let prev_tile = tiles[y * cols + x]\n    return this.floodFillUtil(cols, rows, tiles, x, y, prev_tile, new_tile);\n  } \n\n  handleUpdateTile (x, y) {\n    const col = x / this.props.tile_size;\n    const row = y / this.props.tile_size;\n    let tiles = JSON.parse(JSON.stringify(this.props.tiles)); // cheap deep clone\n\n    switch (this.props.tool_in_use) {\n      case 'pencil':\n        tiles[row * this.props.cols + col] = ({\n          type: 1,\n          character: this.props.selected_tile.character,\n          color: this.props.selected_tile.color,\n          data: JSON.stringify(this.props.selected_tile.data),\n        });\n        break;\n      case 'eraser':\n        tiles[row * this.props.cols + col] = ({ ...this.props.empty_tile })\n        break;\n      case 'filler':\n        if (JSON.stringify(tiles[row * this.props.cols + col]) !== JSON.stringify(this.props.selected_tile)) {\n          tiles = this.floodFill(this.props.cols, this.props.rows, tiles, col, row, {...this.props.selected_tile, data: JSON.stringify(this.props.selected_tile.data)})\n        }\n        break;\n      default:\n        tiles[row * this.props.cols + col] = ({\n          type: 1,\n          character: this.props.selected_tile.character,\n          color: this.props.selected_tile.color,\n        });\n    }\n    this.props.onUpdateTiles(tiles)\n  }\n\n  handleMouseDown () {\n    this.setState({mouse_down: true})\n  }\n\n  handleMouseUp () {\n    this.setState({mouse_down: false})\n  }\n\n  render() {\n    return (\n      <div className='TileMap'>\n        <Stage \n          width={this.props.cols * this.props.tile_size} \n          height={this.props.rows * this.props.tile_size}\n          onMouseDown={this.handleMouseDown.bind(this)} \n          onMouseUp={this.handleMouseUp.bind(this)}\n        >\n          <Layer>\n            {\n              this.drawTiles().map((tile) => {\n                return tile;\n              })\n            }\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n}\n\nexport default TileMap;\n","import React, { Component } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { SketchPicker } from 'react-color';\n\nclass TileForm extends Component {\n  constructor(props) {\n    super(props);\n    let tile_to_edit = this.props.editing_tile_id ? this.props.tiles.filter((tile) => tile.id === this.props.editing_tile_id)[0] : null\n    let tile_label = tile_to_edit ? tile_to_edit.label : '';\n    let tile_character = tile_to_edit ? tile_to_edit.character : '';\n    let tile_color = tile_to_edit ? tile_to_edit.color : '#fff';\n    let tile_data = tile_to_edit ? JSON.stringify(tile_to_edit.data) : '';\n    \n    this.state = {\n      tile_label,\n      tile_character,\n      tile_color,\n      tile_data,\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  handleColorChange (color, event) {\n    this.setState({tile_color: color.hex})\n  }\n\n  onSubmit () {\n    let new_tile = {\n      label: this.state.tile_label,\n      character: this.state.tile_character,\n      color: this.state.tile_color,\n    }\n\n    try {\n      new_tile.data = JSON.parse(this.state.tile_data);\n    } catch(e) {\n      new_tile.data = this.state.tile_data;\n    }\n    \n    if (this.props.editing_tile_id) {\n      this.props.handleEditTile(new_tile, this.props.editing_tile_id)\n    } else {\n      this.props.handleAddTile(new_tile);\n    }\n  }\n\n  render() {\n    return (\n      <div className='TileForm'>\n        <div className='form row'>\n          <TextField\n            id=\"tile-label\"\n            label=\"Label\"\n            className={'text-field'}\n            defaultValue={this.state.tile_label}\n            onChange={this.handleChange('tile_label')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <TextField\n            id=\"tile-character\"\n            label=\"Character\"\n            className={'text-field'}\n            defaultValue={this.state.tile_character}\n            onChange={this.handleChange('tile_character')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <div className='form-label'>Color</div>\n          <SketchPicker \n            width='initial'\n            color={this.state.tile_color}\n            onChangeComplete={this.handleColorChange.bind(this)}\n          />\n          <br />\n          <TextField\n            id=\"tile-data\"\n            label=\"Data\"\n            placeholder='{\n              type: tree\n            }'\n            multiline\n            defaultValue={this.state.tile_data}\n            onChange={this.handleChange('tile_data')}\n            className={'text-field'}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <Button \n            variant=\"outlined\" \n            color=\"primary\" \n            className='btn-full-width'\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n            </i>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TileForm;","import React from \"react\";\n\nconst TilePreview = ({ character, color}) => (\n  <div className='TilePreview'>\n    <span style={{color}}>\n      {character}\n    </span>\n  </div>\n);\n\nexport default TilePreview;","import React, { Component } from \"react\";\nimport TileForm from './TileForm';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TilePreview from './TilePreview';\n\nconst TilePlate = ({ id, label, color, character, data, can_view, handleSwapSelectedTile, handleSwapViewedTile, handleCloseForm, handleRemoveTile, handleToggleEdit}) => {\n  const view_action = can_view \n  ? (\n      <Button\n        color=\"secondary\"\n        aria-label=\"view tile\"\n        onClick={() => {\n          let str_data = JSON.stringify(data)\n          handleSwapViewedTile(id, JSON.stringify({ character, color, data: str_data }))\n        }}\n      >\n        <i className=\"material-icons\">\n          search\n        </i>\n      </Button>\n  )\n  : (\n    <Button\n      color=\"secondary\"\n      aria-label=\"stop viewing tile\"\n      onClick={() => {\n        handleSwapViewedTile(null, '')\n      }}\n    >\n      <i className=\"material-icons\">\n        close\n      </i>\n    </Button>\n  )\n  return (\n    <div className='TilePlate'>\n      <Button \n        variant=\"contained\" \n        color=\"primary\"\n        onClick={() => {\n          handleSwapSelectedTile({character, color, data})\n          handleCloseForm();\n        }}\n      >\n        {label}\n      </Button>\n      <span className=\"actions\">\n        <Button \n          color=\"secondary\" \n          aria-label=\"remove tile\"\n          onClick={() => {handleRemoveTile(id)}}\n        >\n          <i className=\"material-icons\">\n            delete\n          </i>\n        </Button>\n        <Button \n          color=\"secondary\" \n          aria-label=\"edit tile\"\n          onClick={() => {handleToggleEdit(id)}}\n        >\n          <i className=\"material-icons\">\n            edit\n          </i>\n        </Button>\n        { view_action }\n      </span>\n    </div>\n  )\n}\n\nclass TilePalette extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tiles: [\n        {\n          id: 1,\n          label: 'land',\n          color: '#298',\n          character: 'L',\n          data: {type: 'province', owner: 'Oda'}\n        },\n        {\n          id: 2,\n          label: 'water',\n          color: '#ace',\n          character: '~',\n          data: {type: 'natural', owner: 'none'}\n        },\n        {\n          id: 3,\n          label: 'mountain',\n          color: '#bbb',\n          character: 'M',\n          data: {type: 'natural', owner: 'none'}\n        },\n        {\n          id: 4,\n          label: 'army',\n          color: '#f44',\n          character: '@',\n          data: {type: 'troop', owner: 'Oda'}\n        },\n      ],\n      form_is_visible: false,\n      editing_tile_id: null,\n    };\n  }\n\n  drawTilePlates () {\n    return this.state.tiles.map((tile, index) => {\n      return (\n        <TilePlate \n          key={index}\n          id={tile.id}\n          label={tile.label}\n          color={tile.color}\n          character={tile.character}\n          data={{...tile.data}}\n          can_view={tile.id !== this.props.viewed_tile_id}\n          handleSwapSelectedTile={this.props.handleSwapSelectedTile}\n          handleSwapViewedTile={this.props.handleSwapViewedTile}\n          handleCloseForm={this.handleCloseForm.bind(this)}\n          handleRemoveTile={this.handleRemoveTile.bind(this)}\n          handleToggleEdit={this.handleToggleEdit.bind(this)}\n        />\n      )\n    })\n  }\n\n  handleToggleForm () {\n    this.setState({form_is_visible: !this.state.form_is_visible})\n  }\n\n  handleCloseForm () {\n    this.setState({ form_is_visible: false, editing_tile_id: null})\n  }\n\n  handleToggleEdit (editing_tile_id) {\n    this.setState({ editing_tile_id, form_is_visible: false,}, () => {this.setState({form_is_visible: true})})\n  }\n\n  handleAddTile (new_tile) {\n    let tiles = [...this.state.tiles];\n    let next_id = tiles.length > 0 ? tiles[tiles.length - 1].id + 1 : 1;\n    let tile_id = {id: next_id};\n    this.setState({\n      tiles: tiles.concat({ ...tile_id, ...new_tile }),\n      form_is_visible: false,\n    })\n    this.props.handleSwapSelectedTile(new_tile)\n  }\n  \n  handleEditTile (new_tile, id) {\n    let tiles = [...this.state.tiles].map((tile) => {\n      if (tile.id === id) {\n        new_tile.id = id;\n        return {...id, ...new_tile}\n      } else {\n        return tile\n      }\n    });\n    this.setState({\n      tiles,\n      form_is_visible: false,\n      editing_tile_id: null,\n    })\n    this.props.handleSwapSelectedTile(new_tile)\n  }\n\n  handleRemoveTile (id) {\n    let tiles = this.state.tiles.filter((tile) => tile.id !== id);\n    this.setState({\n      tiles,\n      form_is_visible: false,\n      editing_tile_id: null,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"TilePalette tool-pane\">\n        <Grid container spacing={24}>\n          <Grid item xs={12} sm={8}>\n            <h5>Palette</h5>\n            {this.drawTilePlates()}\n          </Grid>\n          <Grid item xs={12} sm={4}>\n            <h5>Current Tile</h5>\n            <TilePreview character={this.props.selected_tile.character} color={this.props.selected_tile.color} />\n          </Grid>\n        </Grid>\n        <br />\n        <Button \n          variant=\"outlined\" \n          color=\"default\" \n          className='btn-full-width'\n          onClick={this.handleToggleForm.bind(this)}\n        >\n          {\n            (this.state.form_is_visible)\n            ? (\n                <i className=\"material-icons\">\n                  close\n                </i>\n            )\n            : (\n                <i className=\"material-icons\">\n                  add\n                </i>\n            )\n          }\n        </Button>\n        {\n          this.state.form_is_visible && \n          (\n            <TileForm \n              tiles={this.state.tiles}\n              editing_tile_id={this.state.editing_tile_id}\n              handleEditTile={this.handleEditTile.bind(this)}\n              handleAddTile={this.handleAddTile.bind(this)}\n            />\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default TilePalette;","import React, { Component } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nclass LayerForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      layer_name: '',\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n\n  onSubmit () {\n    let new_layer = {\n      name: this.state.layer_name,\n    }\n    this.setState({layer_name: ''})\n    this.props.handleAddLayer(new_layer);\n  }\n\n  render() {\n    return (\n      <div className='LayerForm'>\n        <div className='form row'>\n          <TextField\n            id=\"layer-name\"\n            label=\"Name\"\n            className={'text-field'}\n            value={this.state.layer_name}\n            onChange={this.handleChange('layer_name')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <Button \n            variant=\"outlined\" \n            color=\"primary\" \n            className='btn-full-width'\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n            </i>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LayerForm;","import React, { Component } from \"react\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport LayerForm from './LayerForm';\n\nclass LayerPlate extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      layer_name: props.layer.name,\n      is_editing: false,\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  toggleEdit (value) {\n    this.setState({is_editing: value})\n  }\n\n  onSubmit() {\n    this.setState({ layer_name: '', is_editing: false })\n    this.props.handleEditLayer(this.props.layer.id, this.state.layer_name)\n  }\n\n  render () {\n    if (this.state.is_editing) {\n      return (\n        <div className='layer-edit-form'>\n          <TextField\n            id=\"layer-name\"\n            label=\"Name\"\n            className={'text-field'}\n            value={this.state.layer_name}\n            onChange={this.handleChange('layer_name')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n                </i>\n          </Button>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={() => {this.toggleEdit(false)}}\n          >\n            <i className=\"material-icons\">\n              close\n            </i>\n          </Button>\n        </div>\n      )\n    }\n    return (\n      <div className='LayerPlate'>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            this.props.handleSwapLayer(this.props.layer.id)\n          }}\n        >\n          {this.props.layer.name}\n        </Button>\n        {\n          this.props.layer.deletable && (\n            <span className=\"actions\">\n              <Button\n                color=\"secondary\"\n                aria-label=\"remove layer\"\n                onClick={() => { this.props.handleRemoveLayer(this.props.layer.id) }}\n              >\n                <i className=\"material-icons\">\n                  delete\n                </i>\n              </Button>\n              <Button\n                color=\"secondary\"\n                aria-label=\"edit layer\"\n                onClick={() => {this.toggleEdit(true)}}\n              >\n                <i className=\"material-icons\">\n                  edit\n                </i>\n              </Button>\n            </span>\n          )\n        }\n      </div>\n    )\n  }\n}\n\nclass Layers extends Component {\n\n  render() {\n    return (\n      <div className=\"Layers tool-pane\">\n        <h4>Layers</h4>\n        {this.props.layers.map((layer, index) => {\n          return (\n            <div key={index} className={index === this.props.current_layer ? 'layer-selected' : ''}>\n              <LayerPlate \n                layer={layer}\n                handleSwapLayer={this.props.handleSwapLayer}\n                handleRemoveLayer={this.props.handleRemoveLayer}\n                handleEditLayer={this.props.handleEditLayer}\n              />\n            </div>\n          )\n        })}\n        <hr/>\n        <LayerForm handleAddLayer={this.props.handleAddLayer}/>\n      </div>\n    );\n  }\n}\n\nexport default Layers;","import React, { Component } from \"react\";\n\nclass RegionViewer extends Component {\n  render() {\n    return (\n      <div className=\"RegionViewer tool-pane\">\n        <h4>Regions</h4>\n      </div>\n    );\n  }\n}\n\nexport default RegionViewer;","import React, { Component } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grow from '@material-ui/core/Grow';\n\nclass Settings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cols: props.cols,\n      rows: props.rows,\n      grid_min: 1,\n      grid_max: 50,\n    }\n  }\n\n  handleGridChange = name => event => {\n    let new_size = parseInt(event.target.value) ? parseInt(event.target.value) : this.state.grid_min;\n    this.setState({\n      [name]: new_size,\n    }, () => {\n      if (new_size < this.state.grid_min) {\n        this.setState({[name]: this.state.grid_min})\n      } else if (new_size > this.state.grid_max) {\n        this.setState({[name]: this.state.grid_max})\n      }\n    });\n  };\n\n  onSubmit () {\n    let cols = this.state.cols\n    let rows = this.state.rows\n    if (cols !== this.props.cols || rows !== this.props.rows) {\n      let tiles = [];\n      new Array(cols).fill(this.props.empty_tile).map((empty, r) => {\n        return new Array(rows).fill(this.props.empty_tile).map((empty, c) => {\n          tiles.push(JSON.parse(JSON.stringify(this.props.empty_tile)))\n        })\n      })\n      this.props.onUpdateGridSize(cols, rows, tiles);\n    }\n  }\n\n  render() {\n    return (\n      <div className='Settings tool-pane'>\n        <div className='form row'>\n          <div className='inline-group'>\n            <TextField\n              id=\"cols\"\n              label=\"cols\"\n              className={'text-field grid-field'}\n              value={this.state.cols}\n              onChange={this.handleGridChange('cols')}\n              margin=\"normal\"\n              variant=\"outlined\"\n              type=\"number\"\n            />\n            <TextField\n              id=\"rows\"\n              label=\"Rows\"\n              className={'text-field grid-field'}\n              value={this.state.rows}\n              onChange={this.handleGridChange('rows')}\n              margin=\"normal\"\n              variant=\"outlined\"\n              type=\"number\"\n            />\n          </div>\n          {\n            (this.props.cols !== this.state.cols || this.props.rows !== this.state.rows)\n            ? (\n              <Grow in={this.props.cols !== this.state.cols || this.props.rows !== this.state.rows}>\n                <p className=\"red-text\">\n                  WARNING\n                  This action will clear the current grid of all tiles\n                </p>\n              </Grow>\n            )\n            : (\n              null\n            )\n          }\n          <Button \n            variant=\"outlined\" \n            color=\"primary\" \n            className='btn-full-width'\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n            </i>\n          </Button>\n          <br />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Settings;","import React, { Component } from \"react\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport TilePalette from './TilePalette';\nimport Layers from './Layers';\nimport RegionViewer from './RegionViewer';\nimport Settings from \"./Settings\";\n\nclass ToolPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0,\n    };\n  }\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  render() {\n    return (\n      <div className=\"ToolPanel\">\n        <AppBar className='tool-tabs' position=\"static\">\n          <Tabs variant=\"fullWidth\" value={this.state.value} onChange={this.handleChange}>\n            <Tab label=\"Palette\" />\n            <Tab label=\"Layers\" />\n            <Tab label=\"Settings\" />\n          </Tabs>\n        </AppBar>\n        <span className={this.state.value === 0 ? '' : 'hidden'}>\n          <TilePalette \n            handleSwapViewedTile={this.props.handleSwapViewedTile}\n            handleSwapSelectedTile={this.props.handleSwapSelectedTile}\n            selected_tile={this.props.selected_tile}\n            viewed_tile_id={this.props.viewed_tile_id}\n            viewed_tile={this.props.viewed_tile}\n          />\n        </span>\n        <span className={this.state.value === 1 ? '' : 'hidden'}>\n          <Layers \n            layers={this.props.layers}\n            current_layer={this.props.current_layer}\n            handleAddLayer={this.props.handleAddLayer}\n            handleSwapLayer={this.props.handleSwapLayer}\n            handleRemoveLayer={this.props.handleRemoveLayer}\n            handleEditLayer={this.props.handleEditLayer}\n          />\n        </span>\n        <span className={this.state.value === 2 ? '' : 'hidden'}>\n          <Settings\n            cols={this.props.cols} \n            rows={this.props.rows} \n            tiles={this.props.tiles} \n            empty_tile={this.props.empty_tile} \n            onUpdateGridSize={this.props.onUpdateGridSize}\n          />\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default ToolPanel;","import React, { Component } from \"react\";\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nexport class Toolbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      can_hotkey: false,\n    }\n  }\n\n  render() {\n    return (\n      <div className='Toolbar'>\n        <Tooltip title='pencil'>\n          <Button \n            className='btn-tool' \n            onClick={() => {this.props.onToolSwitch('pencil')}} \n            variant={this.props.tool_in_use === 'pencil' ? 'contained' : 'outlined'}\n            color=\"secondary\"\n          >\n            <i className=\"material-icons\">\n              edit\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='eraser'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onToolSwitch('eraser')}}  \n            variant={this.props.tool_in_use === 'eraser' ? 'contained' : 'outlined'} \n            color=\"secondary\"\n          >\n            <i className=\"material-icons\">\n              indeterminate_check_box\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='fill'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onToolSwitch('filler')}}  \n            variant={this.props.tool_in_use === 'filler' ? 'contained' : 'outlined'} \n            color=\"secondary\"\n          >\n            <i className=\"material-icons\">\n              format_color_fill\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='box paint'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onToolSwitch('box_paint')}} \n            variant={this.props.tool_in_use === 'box_paint' ? 'contained' : 'outlined'} \n            color=\"secondary\"\n            disabled\n          >\n            <i className=\"material-icons\">\n              select_all\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='undo'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onUndo()}}  \n            variant='contained'\n            color=\"secondary\"\n            disabled={this.props.tile_history_index >= this.props.tile_history.length - 1}\n          >\n            <i className=\"material-icons\">\n              undo\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='redo'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onRedo()}}  \n            variant='contained'\n            color=\"secondary\"\n            disabled={this.props.tile_history_index <= 0}\n          >\n            <i className=\"material-icons\">\n              redo\n            </i>\n          </Button>\n        </Tooltip>\n      </div>\n    );\n  }\n}\n\nexport default Toolbar","import React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nconst SaveList = ({ saves, onDeleteSave, onLoadSave }) => (\n  <div className='SaveList'>\n    <Grid container spacing={24}>\n      {\n        saves.map((save, index) => {\n          return (\n            <Grid key={index} item xs={12}>\n              <Button\n                color=\"primary\"\n                variant='contained'\n                aria-label=\"save\"\n                onClick={() => {\n                  onLoadSave(save.id);\n                }}\n              >\n                Load {save.timestamp.toString()}\n              </Button>\n              <Button\n                color=\"secondary\"\n                variant='contained'\n                aria-label=\"delete save\"\n                onClick={() => {\n                  onDeleteSave(save.id);\n                }}\n              >\n                <i className=\"material-icons\">\n                  delete\n                </i>\n              </Button>\n            </Grid>\n          )\n        })\n      }\n    </Grid>\n  </div>\n);\n\nexport default SaveList;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, HashRouter } from 'react-router-dom';\nimport { AnimatedSwitch } from 'react-router-transition';\nimport './App.scss';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport JsonView from './Components/JsonView';\nimport TileMap from './Components/TileMap';\nimport ToolPanel from './Components/ToolPanel';\nimport GridToolbar from './Components/Toolbar';\nimport SaveList from './Components/SaveList';\nimport Grid from '@material-ui/core/Grid';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    const cols = 36;\n    const rows = 20;\n    const tile_size = 32;\n    const tile_gutter = 8;\n    const empty_tile = { type: 0, character: '', color: 'white', data: null };\n    const tiles = new Array(cols * rows).fill({ ...empty_tile });\n    const local_storage_key = 'ascii_map_maker';\n    const saves = JSON.parse(localStorage.getItem(local_storage_key));\n\n    this.state = {\n      local_storage_key,\n      show_saves: false,\n      saves,\n      default_cols: cols,\n      default_rows: rows,\n      tile_size,\n      tile_gutter,\n      empty_tile,\n      tile_history_max: 10,\n      selected_tile: {\n        character: '#',\n        color: '#fff',\n        data: null,\n      },\n      viewed_tile_id: null,\n      viewed_tile: '',\n      tool_in_use: 'pencil',\n      layers: [\n        {\n          id: 1,\n          name: 'Base',\n          cols,\n          rows,\n          tiles,\n          tile_history: [JSON.stringify(tiles)],\n          tile_history_index: 0,\n          deletable: false,\n        },\n        {\n          id: 2,\n          name: 'Base 2',\n          cols,\n          rows,\n          tiles,\n          tile_history: [JSON.stringify(tiles)],\n          tile_history_index: 0,\n          deletable: true,\n        },\n      ],\n      current_layer: 0,\n    }\n  }\n\n  handleToolSwitch (tool_in_use) {\n    this.setState({tool_in_use});\n  }\n\n  handleUndo () {\n    let tile_history_index = this.state.layers[this.state.current_layer].tile_history_index + 1\n    let tiles = JSON.parse(this.state.layers[this.state.current_layer].tile_history[tile_history_index])\n    let layers = [...this.state.layers];\n    layers[this.state.current_layer].tiles = tiles;\n    layers[this.state.current_layer].tile_history_index = tile_history_index;\n    this.setState({\n      layers\n    })\n  }\n  \n  handleRedo () {\n    let tile_history_index = this.state.layers[this.state.current_layer].tile_history_index - 1\n    let tiles = JSON.parse(this.state.layers[this.state.current_layer].tile_history[tile_history_index])\n    let layers = [...this.state.layers];\n    layers[this.state.current_layer].tiles = tiles;\n    layers[this.state.current_layer].tile_history_index = tile_history_index;\n    this.setState({\n      layers\n    })\n  }\n\n  handleSwapSelectedTile (selected_tile_properties) {\n    let tool_in_use = this.state.tool_in_use === 'eraser' ? 'pencil' : this.state.tool_in_use\n    this.setState({selected_tile: selected_tile_properties, tool_in_use});\n  }\n \n  handleSwapViewedTile (id, value) {\n    this.setState({\n      viewed_tile_id: id,\n      viewed_tile: value\n    });\n  }\n\n  handleUpdateTiles (tiles) {\n    let tile_history = [JSON.stringify(tiles), ...this.state.layers[this.state.current_layer].tile_history].slice(this.state.layers[this.state.current_layer].tile_history_index, this.state.tile_history_max)\n    let layers = [...this.state.layers];\n    layers[this.state.current_layer].tile_history_index = 0;\n    layers[this.state.current_layer].tiles = tiles;\n    layers[this.state.current_layer].tile_history = tile_history;\n    \n    this.setState({\n      layers\n    })\n  }\n  \n  handleUpdateGridSize (cols, rows, tiles) {\n    let layers = [...this.state.layers];\n    layers[this.state.current_layer].cols = cols;\n    layers[this.state.current_layer].rows = rows;\n    layers[this.state.current_layer].tiles = tiles;\n\n    this.setState({\n      layers\n    })\n  }\n\n  handleAddLayer (new_layer) {\n    const tiles = new Array(this.state.default_cols * this.state.default_rows).fill({ ...this.state.empty_tile });\n    \n    let layers = [...this.state.layers];\n    let next_id = layers.length > 0 ? layers[layers.length - 1].id + 1 : 1;\n    new_layer.id = next_id;\n    new_layer.tiles = tiles;\n    new_layer.cols = this.state.default_cols;\n    new_layer.rows = this.state.default_rows;\n    new_layer.tile_history = [JSON.stringify(tiles)];\n    new_layer.tile_history_index = 0;\n    new_layer.deletable = true;\n\n    layers = layers.concat(new_layer);\n    this.setState({layers},\n      () => {\n        this.handleSwapLayer(next_id);\n      }\n    );\n  }\n\n  handleSwapLayer(id) {\n    this.setState({current_layer: id - 1})\n  }\n\n  handleRemoveLayer(id) {\n    let layers = [...this.state.layers].filter((layer) => layer.id !== id);\n    this.setState({layers, current_layer: 0});\n  }\n\n  handleEditLayer(id, name) {\n    let layers = [...this.state.layers].map((layer) => {\n      if (layer.id === id) {\n        layer.name = name;\n      }\n      return layer;\n    });\n    this.setState({layers});\n  }\n\n  handleToggleSaves (value) {\n    this.setState({\n      show_saves: value,\n    })\n  }\n\n  handleSaveStateToLocalStorage () {\n    let local_saves = JSON.parse(localStorage.getItem(this.state.local_storage_key));\n    let next_id  = 1;\n    if (local_saves) {\n      next_id = local_saves.length > 0 ? local_saves[local_saves.length - 1].id + 1 : 1;\n    }\n    let new_save = {\n      id: next_id,\n      timestamp: new Date(),\n      data: this.state,\n    }\n\n    let saves = local_saves !== null ? [...local_saves, new_save] : [new_save];\n\n    try {\n      localStorage.setItem(this.state.local_storage_key, JSON.stringify(saves));\n      this.setState({saves})\n    } catch(error) {\n      alert('Local storage is full');\n    }\n  }\n  \n  handleLoadStateFromLocalStorage (id) {\n    let save = this.state.saves.filter((save) => save.id === id);\n    if (save.length > 0) {\n      let new_state = {...save[0].data, saves: [...this.state.saves]}\n      this.setState(new_state);\n    }\n    this.handleToggleSaves(false);\n  }\n\n  handleDeleteStateFromLocalStorage (id) {\n    let local_saves = JSON.parse(localStorage.getItem(this.state.local_storage_key));\n    let remaining_saves = local_saves.filter((save) => save.id !== id);\n    localStorage.setItem(this.state.local_storage_key, JSON.stringify(remaining_saves));\n    this.setState({ saves: remaining_saves });\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"App\">\n          <AppBar className=\"NavBar\" position=\"static\">\n            <Toolbar>\n              <h5 className=\"nav-title\" onClick={() => { window.location = '#/' }}>ASCII Map Maker</h5>\n              <GridToolbar \n                onToolSwitch={this.handleToolSwitch.bind(this)}\n                onUndo={this.handleUndo.bind(this)}\n                onRedo={this.handleRedo.bind(this)}\n                tile_history={this.state.layers[this.state.current_layer].tile_history}\n                tile_history_index={this.state.layers[this.state.current_layer].tile_history_index}\n                selected_tile={this.state.selected_tile}\n                tool_in_use={this.state.tool_in_use}\n              />\n              <div className='nav-buttons-right'>\n                <Button \n                  variant='contained'\n                  color='secondary'\n                  onClick={this.handleSaveStateToLocalStorage.bind(this)}\n                >\n                  Save\n                </Button>\n                <Button \n                  variant='contained'\n                  color='secondary'\n                  disabled={!this.state.saves.length}\n                  onClick={() => {this.handleToggleSaves(!this.state.show_saves)}}\n                >\n                  Load\n                </Button>\n                <Button color=\"inherit\" onClick={() => {window.location = '#/export'}}>Export</Button>\n              </div>\n            </Toolbar>\n          </AppBar>\n          {\n            this.state.show_saves && (\n              <SaveList\n                saves={this.state.saves}\n                onLoadSave={this.handleLoadStateFromLocalStorage.bind(this)}\n                onDeleteSave={this.handleDeleteStateFromLocalStorage.bind(this)}\n              />\n            )\n          }\n          <AnimatedSwitch\n            atEnter={{ opacity: 0 }}\n            atLeave={{ opacity: 0 }}\n            atActive={{ opacity: 1 }}\n            className=\"fade\"\n          >\n            <Route exact path={'/'} render={(props) => (\n              <Grid container >\n                <Grid item xs={12} sm={8}>\n                  <TileMap\n                    cols={this.state.layers[this.state.current_layer].cols}\n                    rows={this.state.layers[this.state.current_layer].rows}\n                    tiles={this.state.layers[this.state.current_layer].tiles}\n                    tile_size={32}\n                    tile_gutter={8}\n                    selected_tile={{ ...this.state.selected_tile }}\n                    viewed_tile={this.state.viewed_tile}\n                    onUpdateTiles={this.handleUpdateTiles.bind(this)}\n                    tool_in_use={this.state.tool_in_use}\n                    empty_tile={this.state.empty_tile}\n                  />\n                </ Grid>\n                <Grid item xs={12} sm={4}>\n                  <ToolPanel \n                    layers={this.state.layers}\n                    current_layer={this.state.current_layer}\n                    cols={this.state.layers[this.state.current_layer].cols}\n                    rows={this.state.layers[this.state.current_layer].rows}\n                    tiles={this.state.layers[this.state.current_layer].tiles}\n                    empty_tile={this.state.empty_tile}\n                    selected_tile={this.state.selected_tile}\n                    viewed_tile_id={this.state.viewed_tile_id}\n                    viewed_tile={this.state.viewed_tile}\n                    handleSwapSelectedTile={this.handleSwapSelectedTile.bind(this)} \n                    handleSwapViewedTile={this.handleSwapViewedTile.bind(this)} \n                    handleAddLayer={this.handleAddLayer.bind(this)} \n                    handleSwapLayer={this.handleSwapLayer.bind(this)} \n                    handleRemoveLayer={this.handleRemoveLayer.bind(this)} \n                    handleEditLayer={this.handleEditLayer.bind(this)} \n                    onUpdateGridSize={this.handleUpdateGridSize.bind(this)} \n                  />\n                </ Grid>\n              </ Grid>\n            )} />\n            <Route path={'/export'} render={\n              (props) => (\n                <JsonView \n                  cols={this.state.layers[this.state.current_layer].cols}\n                  rows={this.state.layers[this.state.current_layer].rows}\n                  tiles={this.state.layers[this.state.current_layer].tiles} \n                />\n              )} \n            />\n          </AnimatedSwitch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}