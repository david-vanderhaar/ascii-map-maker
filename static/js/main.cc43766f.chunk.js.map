{"version":3,"sources":["Components/JsonView.js","Components/Tiles.js","Components/TileMap.js","Components/TileForm.js","Components/TilePreview.js","Components/TilePalette.js","Components/LayerForm.js","Components/Layers.js","Components/RegionViewer.js","Components/Settings.js","Components/ToolPanel.js","Components/Toolbar.js","Components/SaveList.js","logo.svg","App.js","serviceWorker.js","index.js"],"names":["convertTileArrayToObj","cols","rows","tiles","tileObject","Array","fill","forEach","empty","c","r","tile","totalCols","col","row","getTile","concat","JsonView","_ref","react_default","a","createElement","className","Grid_default","container","spacing","item","xs","sm","Button_default","color","variant","aria-label","onClick","document","getElementById","select","execCommand","TextField_default","id","label","multiline","fullWidth","rowsMax","value","JSON","stringify","margin","TextTile","Component","_Component2","props","_this2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","onUpdateTile","x","y","handleMouseOver","mouse_down","setState","is_hovering","handleMouseOut","state","character","hover_fill","viewing_offset","viewing_size_increase","inherits","createClass","key","obj_for_view","data","is_viewing","viewed_tile","ReactKonva","width","tile_size","height","text","fontSize","align","verticalAlign","onMouseOver","onMouseOut","TileMap","_this","map","Tiles_TextTile","handleUpdateTile","bind","prev_tile","new_tile","current_tile","parse","floodFillUtil","currentTile","tile_changed","tool_in_use","newTile","type","selected_tile","empty_tile","objectSpread","floodFill","onUpdateTiles","onMouseDown","handleMouseDown","onMouseUp","handleMouseUp","drawTiles","TileForm","handleChange","name","event","defineProperty","target","tile_to_edit","editing_tile_id","filter","tile_label","tile_character","tile_color","tile_data","hex","e","handleEditTile","handleAddTile","defaultValue","onChange","lib","onChangeComplete","handleColorChange","placeholder","onSubmit","TilePreview","style","TilePlate","can_view","handleSwapSelectedTile","handleSwapViewedTile","handleCloseForm","handleRemoveTile","handleToggleEdit","view_action","TilePalette","form_is_visible","index","TilePalette_TilePlate","viewed_tile_id","_this3","toConsumableArray","tile_id","length","handleUpdateTilePaletteTiles","drawTilePlates","Components_TilePreview","handleToggleForm","Components_TileForm","LayerForm","layer_name","new_layer","handleAddLayer","LayerPlate","layer","is_editing","handleEditLayer","toggleEdit","handleSwapLayer","deletable","handleRemoveLayer","Layers","layers","current_layer","Layers_LayerPlate","Components_LayerForm","Settings","handleGridChange","new_size","parseInt","grid_min","grid_max","push","onUpdateGridSize","Grow_default","in","ToolPanel","AppBar_default","position","Tabs_default","Tab_default","Components_TilePalette","tile_palette_tiles","Components_Layers","Components_Settings","Toolbar","_Component","can_hotkey","Tooltip_default","title","onToolSwitch","disabled","onUndo","tile_history_index","tile_history","onRedo","SaveList","saves","onDeleteSave","onLoadSave","save","timestamp","toString","_extends","assign","i","arguments","source","prototype","hasOwnProperty","apply","logo_ref","fillOpacity","rx","ry","_ref2","d","logo_SvgComponent","viewBox","transform","touchAction","App","__webpack_require__","p","localStorage","getItem","console","log","local_storage_key","show_saves","default_cols","default_rows","tile_gutter","tile_history_max","owner","selected_tile_properties","slice","next_id","local_saves","new_save","Date","setItem","error","alert","new_state","handleToggleSaves","remaining_saves","HashRouter","Toolbar_default","window","location","Components_Toolbar","handleToolSwitch","handleUndo","handleRedo","handleSaveStateToLocalStorage","Components_SaveList","handleLoadStateFromLocalStorage","handleDeleteStateFromLocalStorage","es","atEnter","opacity","atLeave","atActive","Route","exact","path","render","Components_TileMap","handleUpdateTiles","Components_ToolPanel","handleUpdateGridSize","Components_JsonView","Boolean","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc43766f.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\n\nconst getTile = (totalCols, col, row, tiles) => {\n  return tiles[row * totalCols + col]\n}\n\nconst convertTileArrayToObj = (cols, rows, tiles) => {\n  let tileObject = {};\n  new Array(cols).fill(null).forEach((empty, c) => {\n    new Array(rows).fill(null).forEach((empty, r) => {\n      let tile = getTile(cols, c, r, tiles);\n      tileObject[`${c},${r}`] = tile;\n    })\n  })\n  return tileObject;\n}\n\nconst JsonView = ({ cols, rows, tiles }) => (\n  <div className='JsonView'>\n    <Grid container spacing={24}>\n      <Grid item xs={12} sm={4}>\n        <Button\n          color=\"primary\"\n          variant='contained'\n          aria-label=\"copy\"\n          onClick={() => { \n            document.getElementById('json-export-data').select();\n            document.execCommand(\"copy\");\n          }}\n        >\n          Copy to Clipboard \n        </Button>\n      </Grid>\n      <Grid item xs={12} sm={8}>\n        <TextField\n          id=\"json-export-data\"\n          label=\"Json\"\n          multiline\n          fullWidth\n          rowsMax=\"8\"\n          value={JSON.stringify({\n            cols,\n            rows,\n            tiles: convertTileArrayToObj(cols, rows, tiles),\n          })}\n          margin=\"normal\"\n          variant=\"outlined\"\n        />\n      </Grid>\n    </Grid>\n  </div>\n);\n\nexport default JsonView;","import React, { Component } from \"react\";\nimport Konva from \"konva\";\nimport { Rect, Text, Group } from \"react-konva\";\n\nexport class ColoredRect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: \"black\"\n    };\n  }\n\n  handleClick = () => {\n    this.setState({\n      color: Konva.Util.getRandomColor()\n    });\n  };\n\n  render() {\n    return (\n      <Rect\n        x={this.props.x}\n        y={this.props.y}\n        width={this.props.tile_size - this.props.tile_gutter}\n        height={this.props.tile_size - this.props.tile_gutter}\n        onClick={this.handleClick}\n      />\n    );\n  }\n}\n\nexport class TextTile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      character: props.character,\n      fill: props.color,\n      hover_fill: 'red',\n      is_hovering: false,\n      viewing_offset: -16,\n      viewing_size_increase: 8,\n    };\n  }\n\n  handleClick = () => {\n    this.props.onUpdateTile(this.props.x, this.props.y)\n  };\n\n  handleMouseOver = () => {\n    let new_state = {\n      is_hovering: true,\n    }\n    if (this.props.mouse_down) {\n      this.props.onUpdateTile(this.props.x, this.props.y)\n    }\n    \n    this.setState(new_state);\n  };\n\n  handleMouseOut = () => {\n    this.setState({\n      is_hovering: false,\n    });\n  };\n\n  render() {\n    const obj_for_view = { character: this.props.character, color: this.props.color, data: this.props.data };\n    const is_viewing = this.props.viewed_tile === JSON.stringify(obj_for_view);\n    const viewing_offset = is_viewing * this.state.viewing_offset;\n    const viewing_size_increase = is_viewing * this.state.viewing_size_increase;\n\n    const tile = is_viewing \n    ? (\n        <Rect\n          x={this.props.x}\n          y={this.props.y}\n          width={this.props.tile_size}\n          height={this.props.tile_size}\n          fill={this.props.color}\n        />\n    )\n    : (\n      <Text\n        text={this.props.character}\n        fill={this.state.is_hovering ? this.state.hover_fill: this.props.color}\n        x={this.props.x + viewing_offset}\n        y={this.props.y + viewing_offset}\n        fontSize={16 + viewing_size_increase}\n        align='center'\n        verticalAlign='middle'\n        width={this.props.tile_size}\n        height={this.props.tile_size}\n        onClick={this.handleClick}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n      />\n    )\n    return (\n      <Group>\n        {tile}\n      </Group>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport { Stage, Layer } from \"react-konva\";\nimport * as Tiles from './Tiles.js';\n\nclass TileMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mouse_down: false,\n    };\n  }\n\n  getTile (col, row) {\n    return this.props.tiles[row * this.props.cols + col]\n  }\n\n  drawTiles () {\n    let tiles = new Array(this.props.cols).fill(null).map((empty, c) => {\n      return new Array(this.props.rows).fill(null).map((empty, r) => {\n        let tile = this.getTile(c, r);\n        const is_viewing = false;\n        \n        return (\n          <Tiles.TextTile\n            key={`${c}-${r}`}\n            is_viewing={is_viewing}\n            viewed_tile={this.props.viewed_tile}\n            x={c * this.props.tile_size}\n            y={r * this.props.tile_size}\n            character={tile.character}\n            color={tile.color}\n            data={tile.data}\n            tile_size={this.props.tile_size}\n            mouse_down={this.state.mouse_down}\n            onUpdateTile={this.handleUpdateTile.bind(this)}\n          />\n        )\n      })\n    })\n    return tiles;\n  }\n\n  floodFillUtil (cols, rows, tiles, x, y, prev_tile, new_tile)\n  {\n    let current_tile = tiles[y * cols + x];\n    // Base cases \n    if (x < 0 || x >= cols || y < 0 || y >= rows) { return tiles; }\n    if (JSON.stringify(current_tile) !== JSON.stringify(prev_tile)) { return tiles; }\n    \n    // Replace the color at (x, y) \n    tiles[y * cols + x] = JSON.parse(JSON.stringify(new_tile));\n    \n    // Recur for north, east, south and west \n    this.floodFillUtil(cols, rows, tiles, x + 1, y, prev_tile, new_tile);\n    this.floodFillUtil(cols, rows, tiles, x - 1, y, prev_tile, new_tile);\n    this.floodFillUtil(cols, rows, tiles, x, y + 1, prev_tile, new_tile);\n    this.floodFillUtil(cols, rows, tiles, x, y - 1, prev_tile, new_tile);\n\n    return tiles;\n  }\n\n  // It mainly finds the previous color on (x, y) and \n  floodFill (cols, rows, tiles, x, y, new_tile)\n  {\n    let prev_tile = tiles[y * cols + x]\n    return this.floodFillUtil(cols, rows, tiles, x, y, prev_tile, new_tile);\n  } \n\n  handleUpdateTile (x, y) {\n    const col = x / this.props.tile_size;\n    const row = y / this.props.tile_size;\n    let tiles = JSON.parse(JSON.stringify(this.props.tiles)); // cheap deep clone\n    const currentTile = JSON.stringify(tiles[row * this.props.cols + col])\n    let tile_changed = false;\n    switch (this.props.tool_in_use) {\n      default:\n      case 'pencil':\n        const newTile = {\n          type: 1,\n          character: this.props.selected_tile.character,\n          color: this.props.selected_tile.color,\n          data: this.props.selected_tile.data,\n        }\n        if (currentTile !== JSON.stringify(newTile)) {\n          tiles[row * this.props.cols + col] = (newTile);\n          tile_changed = true;\n        }\n        break;\n      case 'eraser':\n        if (currentTile !== JSON.stringify(this.props.empty_tile)) {\n          tiles[row * this.props.cols + col] = ({ ...this.props.empty_tile })\n          tile_changed = true;\n        }\n        break;\n      case 'filler':\n        if (JSON.stringify(tiles[row * this.props.cols + col]) !== JSON.stringify(this.props.selected_tile)) {\n          tiles = this.floodFill(this.props.cols, this.props.rows, tiles, col, row, {...this.props.selected_tile, data: this.props.selected_tile.data})\n        }\n        tile_changed = true;\n        break;\n    }\n\n    if (tile_changed) this.props.onUpdateTiles(tiles)\n  }\n\n  handleMouseDown () {\n    this.setState({mouse_down: true})\n  }\n\n  handleMouseUp () {\n    this.setState({mouse_down: false})\n  }\n\n  render() {\n    return (\n      <div className='TileMap'>\n        <Stage \n          width={this.props.cols * this.props.tile_size} \n          height={this.props.rows * this.props.tile_size}\n          onMouseDown={this.handleMouseDown.bind(this)} \n          onMouseUp={this.handleMouseUp.bind(this)}\n        >\n          <Layer>\n            {\n              this.drawTiles().map((tile) => {\n                return tile;\n              })\n            }\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n}\n\nexport default TileMap;\n","import React, { Component } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { SketchPicker } from 'react-color';\n\nclass TileForm extends Component {\n  constructor(props) {\n    super(props);\n    let tile_to_edit = this.props.editing_tile_id ? this.props.tiles.filter((tile) => tile.id === this.props.editing_tile_id)[0] : null\n    let tile_label = tile_to_edit ? tile_to_edit.label : '';\n    let tile_character = tile_to_edit ? tile_to_edit.character : '';\n    let tile_color = tile_to_edit ? tile_to_edit.color : '#fff';\n    let tile_data = tile_to_edit ? JSON.stringify(tile_to_edit.data) : null;\n    \n    this.state = {\n      tile_label,\n      tile_character,\n      tile_color,\n      tile_data,\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  handleColorChange (color, event) {\n    this.setState({tile_color: color.hex})\n  }\n\n  onSubmit () {\n    let new_tile = {\n      label: this.state.tile_label,\n      character: this.state.tile_character,\n      color: this.state.tile_color,\n    }\n\n    try {\n      new_tile.data = JSON.parse(this.state.tile_data);\n    } catch(e) {\n      new_tile.data = this.state.tile_data;\n    }\n    \n    if (this.props.editing_tile_id) {\n      this.props.handleEditTile(new_tile, this.props.editing_tile_id)\n    } else {\n      this.props.handleAddTile(new_tile);\n    }\n  }\n\n  render() {\n    return (\n      <div className='TileForm'>\n        <div className='form row'>\n          <TextField\n            id=\"tile-label\"\n            label=\"Label\"\n            className={'text-field'}\n            defaultValue={this.state.tile_label}\n            onChange={this.handleChange('tile_label')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <TextField\n            id=\"tile-character\"\n            label=\"Character\"\n            className={'text-field'}\n            defaultValue={this.state.tile_character}\n            onChange={this.handleChange('tile_character')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <div className='form-label'>Color</div>\n          <SketchPicker \n            width='initial'\n            color={this.state.tile_color}\n            onChangeComplete={this.handleColorChange.bind(this)}\n          />\n          <br />\n          <TextField\n            id=\"tile-data\"\n            label=\"Data\"\n            placeholder='{\n              \"type\": \"tree\"\n            }'\n            multiline\n            defaultValue={this.state.tile_data}\n            onChange={this.handleChange('tile_data')}\n            className={'text-field'}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <Button \n            variant=\"outlined\" \n            color=\"primary\" \n            className='btn-full-width'\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n            </i>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TileForm;","import React from \"react\";\n\nconst TilePreview = ({ character, color}) => (\n  <div className='TilePreview'>\n    <span style={{color}}>\n      {character}\n    </span>\n  </div>\n);\n\nexport default TilePreview;","import React, { Component } from \"react\";\nimport TileForm from './TileForm';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TilePreview from './TilePreview';\n\nconst TilePlate = ({ id, label, color, character, data, can_view, handleSwapSelectedTile, handleSwapViewedTile, handleCloseForm, handleRemoveTile, handleToggleEdit}) => {\n  const view_action = can_view \n  ? (\n      <Button\n        color=\"secondary\"\n        aria-label=\"view tile\"\n        onClick={() => {\n          handleSwapViewedTile(id, JSON.stringify({ character, color, data, }))\n        }}\n      >\n        <i className=\"material-icons\">\n          search\n        </i>\n      </Button>\n  )\n  : (\n    <Button\n      color=\"secondary\"\n      aria-label=\"stop viewing tile\"\n      onClick={() => {\n        handleSwapViewedTile(null, '')\n      }}\n    >\n      <i className=\"material-icons\">\n        close\n      </i>\n    </Button>\n  )\n  return (\n    <div className='TilePlate'>\n      <Button \n        variant=\"contained\" \n        color=\"primary\"\n        onClick={() => {\n          handleSwapSelectedTile({character, color, data})\n          handleCloseForm();\n        }}\n      >\n        {label}\n      </Button>\n      <span className=\"actions\">\n        <Button \n          color=\"secondary\" \n          aria-label=\"remove tile\"\n          onClick={() => {handleRemoveTile(id)}}\n        >\n          <i className=\"material-icons\">\n            delete\n          </i>\n        </Button>\n        <Button \n          color=\"secondary\" \n          aria-label=\"edit tile\"\n          onClick={() => {handleToggleEdit(id)}}\n        >\n          <i className=\"material-icons\">\n            edit\n          </i>\n        </Button>\n        { view_action }\n      </span>\n    </div>\n  )\n}\n\nclass TilePalette extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      form_is_visible: false,\n      editing_tile_id: null,\n    };\n  }\n\n  drawTilePlates () {\n    return this.props.tiles.map((tile, index) => {\n      return (\n        <TilePlate \n          key={index}\n          id={tile.id}\n          label={tile.label}\n          color={tile.color}\n          character={tile.character}\n          data={{...tile.data}}\n          can_view={tile.id !== this.props.viewed_tile_id}\n          handleSwapSelectedTile={this.props.handleSwapSelectedTile}\n          handleSwapViewedTile={this.props.handleSwapViewedTile}\n          handleCloseForm={this.handleCloseForm.bind(this)}\n          handleRemoveTile={this.handleRemoveTile.bind(this)}\n          handleToggleEdit={this.handleToggleEdit.bind(this)}\n        />\n      )\n    })\n  }\n\n  handleToggleForm () {\n    this.setState({form_is_visible: !this.state.form_is_visible})\n  }\n\n  handleCloseForm () {\n    this.setState({ form_is_visible: false, editing_tile_id: null})\n  }\n\n  handleToggleEdit (editing_tile_id) {\n    this.setState({ editing_tile_id, form_is_visible: false,}, () => {this.setState({form_is_visible: true})})\n  }\n\n  handleAddTile (new_tile) {\n    let tiles = [...this.props.tiles];\n    let next_id = tiles.length > 0 ? tiles[tiles.length - 1].id + 1 : 1;\n    let tile_id = {id: next_id};\n    this.setState({\n      form_is_visible: false,\n    })\n    this.props.handleSwapSelectedTile(new_tile)\n    this.props.handleUpdateTilePaletteTiles(tiles.concat({ ...tile_id, ...new_tile }));\n  }\n  \n  handleEditTile (new_tile, id) {\n    let tiles = [...this.props.tiles].map((tile) => {\n      if (tile.id === id) {\n        new_tile.id = id;\n        return {...id, ...new_tile}\n      } else {\n        return tile\n      }\n    });\n    this.setState({\n      form_is_visible: false,\n      editing_tile_id: null,\n    })\n    this.props.handleSwapSelectedTile(new_tile)\n    this.props.handleUpdateTilePaletteTiles(tiles);\n  }\n\n  handleRemoveTile (id) {\n    let tiles = this.props.tiles.filter((tile) => tile.id !== id);\n    this.setState({\n      form_is_visible: false,\n      editing_tile_id: null,\n    });\n    this.props.handleUpdateTilePaletteTiles(tiles);\n  }\n\n  render() {\n    return (\n      <div className=\"TilePalette tool-pane\">\n        <Grid container spacing={24}>\n          <Grid item xs={12} sm={8}>\n            <h5>Palette</h5>\n            {this.drawTilePlates()}\n          </Grid>\n          <Grid item xs={12} sm={4}>\n            <h5>Current Tile</h5>\n            <TilePreview character={this.props.selected_tile.character} color={this.props.selected_tile.color} />\n          </Grid>\n        </Grid>\n        <br />\n        <Button \n          variant=\"outlined\" \n          color=\"default\" \n          className='btn-full-width'\n          onClick={this.handleToggleForm.bind(this)}\n        >\n          {\n            (this.state.form_is_visible)\n            ? (\n                <i className=\"material-icons\">\n                  close\n                </i>\n            )\n            : (\n                <i className=\"material-icons\">\n                  add\n                </i>\n            )\n          }\n        </Button>\n        {\n          this.state.form_is_visible && \n          (\n            <TileForm \n              tiles={this.props.tiles}\n              editing_tile_id={this.state.editing_tile_id}\n              handleEditTile={this.handleEditTile.bind(this)}\n              handleAddTile={this.handleAddTile.bind(this)}\n            />\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default TilePalette;","import React, { Component } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nclass LayerForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      layer_name: '',\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n\n  onSubmit () {\n    let new_layer = {\n      name: this.state.layer_name,\n    }\n    this.setState({layer_name: ''})\n    this.props.handleAddLayer(new_layer);\n  }\n\n  render() {\n    return (\n      <div className='LayerForm'>\n        <div className='form row'>\n          <TextField\n            id=\"layer-name\"\n            label=\"Name\"\n            className={'text-field'}\n            value={this.state.layer_name}\n            onChange={this.handleChange('layer_name')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <Button \n            variant=\"outlined\" \n            color=\"primary\" \n            className='btn-full-width'\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n            </i>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LayerForm;","import React, { Component } from \"react\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport LayerForm from './LayerForm';\n\nclass LayerPlate extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      layer_name: props.layer.name,\n      is_editing: false,\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  toggleEdit (value) {\n    this.setState({is_editing: value})\n  }\n\n  onSubmit() {\n    this.setState({ layer_name: '', is_editing: false })\n    this.props.handleEditLayer(this.props.layer.id, this.state.layer_name)\n  }\n\n  render () {\n    if (this.state.is_editing) {\n      return (\n        <div className='layer-edit-form'>\n          <TextField\n            id=\"layer-name\"\n            label=\"Name\"\n            className={'text-field'}\n            value={this.state.layer_name}\n            onChange={this.handleChange('layer_name')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n                </i>\n          </Button>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={() => {this.toggleEdit(false)}}\n          >\n            <i className=\"material-icons\">\n              close\n            </i>\n          </Button>\n        </div>\n      )\n    }\n    return (\n      <div className='LayerPlate'>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            this.props.handleSwapLayer(this.props.layer.id)\n          }}\n        >\n          {this.props.layer.name}\n        </Button>\n        {\n          this.props.layer.deletable && (\n            <span className=\"actions\">\n              <Button\n                color=\"secondary\"\n                aria-label=\"remove layer\"\n                onClick={() => { this.props.handleRemoveLayer(this.props.layer.id) }}\n              >\n                <i className=\"material-icons\">\n                  delete\n                </i>\n              </Button>\n              <Button\n                color=\"secondary\"\n                aria-label=\"edit layer\"\n                onClick={() => {this.toggleEdit(true)}}\n              >\n                <i className=\"material-icons\">\n                  edit\n                </i>\n              </Button>\n            </span>\n          )\n        }\n      </div>\n    )\n  }\n}\n\nclass Layers extends Component {\n\n  render() {\n    return (\n      <div className=\"Layers tool-pane\">\n        <h4>Layers</h4>\n        {this.props.layers.map((layer, index) => {\n          return (\n            <div key={index} className={index === this.props.current_layer ? 'layer-selected' : ''}>\n              <LayerPlate \n                layer={layer}\n                handleSwapLayer={this.props.handleSwapLayer}\n                handleRemoveLayer={this.props.handleRemoveLayer}\n                handleEditLayer={this.props.handleEditLayer}\n              />\n            </div>\n          )\n        })}\n        <hr/>\n        <LayerForm handleAddLayer={this.props.handleAddLayer}/>\n      </div>\n    );\n  }\n}\n\nexport default Layers;","import React, { Component } from \"react\";\n\nclass RegionViewer extends Component {\n  render() {\n    return (\n      <div className=\"RegionViewer tool-pane\">\n        <h4>Regions</h4>\n      </div>\n    );\n  }\n}\n\nexport default RegionViewer;","import React, { Component } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grow from '@material-ui/core/Grow';\n\nclass Settings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cols: props.cols,\n      rows: props.rows,\n      grid_min: 1,\n      grid_max: 50,\n    }\n  }\n\n  handleGridChange = name => event => {\n    let new_size = parseInt(event.target.value) ? parseInt(event.target.value) : this.state.grid_min;\n    this.setState({\n      [name]: new_size,\n    }, () => {\n      if (new_size < this.state.grid_min) {\n        this.setState({[name]: this.state.grid_min})\n      } else if (new_size > this.state.grid_max) {\n        this.setState({[name]: this.state.grid_max})\n      }\n    });\n  };\n\n  onSubmit () {\n    let cols = this.state.cols\n    let rows = this.state.rows\n    if (cols !== this.props.cols || rows !== this.props.rows) {\n      let tiles = [];\n      new Array(cols).fill(this.props.empty_tile).map((empty, r) => {\n        return new Array(rows).fill(this.props.empty_tile).map((empty, c) => {\n          tiles.push(JSON.parse(JSON.stringify(this.props.empty_tile)))\n        })\n      })\n      this.props.onUpdateGridSize(cols, rows, tiles);\n    }\n  }\n\n  render() {\n    return (\n      <div className='Settings tool-pane'>\n        <div className='form row'>\n          <div className='inline-group'>\n            <TextField\n              id=\"cols\"\n              label=\"cols\"\n              className={'text-field grid-field'}\n              value={this.state.cols}\n              onChange={this.handleGridChange('cols')}\n              margin=\"normal\"\n              variant=\"outlined\"\n              type=\"number\"\n            />\n            <TextField\n              id=\"rows\"\n              label=\"Rows\"\n              className={'text-field grid-field'}\n              value={this.state.rows}\n              onChange={this.handleGridChange('rows')}\n              margin=\"normal\"\n              variant=\"outlined\"\n              type=\"number\"\n            />\n          </div>\n          {\n            (this.props.cols !== this.state.cols || this.props.rows !== this.state.rows)\n            ? (\n              <Grow in={this.props.cols !== this.state.cols || this.props.rows !== this.state.rows}>\n                <p className=\"red-text\">\n                  WARNING\n                  This action will clear the current grid of all tiles\n                </p>\n              </Grow>\n            )\n            : (\n              null\n            )\n          }\n          <Button \n            variant=\"outlined\" \n            color=\"primary\" \n            className='btn-full-width'\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n            </i>\n          </Button>\n          <br />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Settings;","import React, { Component } from \"react\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport TilePalette from './TilePalette';\nimport Layers from './Layers';\nimport RegionViewer from './RegionViewer';\nimport Settings from \"./Settings\";\n\nclass ToolPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0,\n    };\n  }\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  render() {\n    return (\n      <div className=\"ToolPanel\">\n        <AppBar className='tool-tabs' position=\"static\">\n          <Tabs variant=\"fullWidth\" value={this.state.value} onChange={this.handleChange}>\n            <Tab label=\"Palette\" />\n            <Tab label=\"Layers\" />\n            <Tab label=\"Settings\" />\n          </Tabs>\n        </AppBar>\n        <span className={this.state.value === 0 ? '' : 'hidden'}>\n          <TilePalette \n            handleSwapViewedTile={this.props.handleSwapViewedTile}\n            handleSwapSelectedTile={this.props.handleSwapSelectedTile}\n            handleUpdateTilePaletteTiles={this.props.handleUpdateTilePaletteTiles}\n            selected_tile={this.props.selected_tile}\n            viewed_tile_id={this.props.viewed_tile_id}\n            viewed_tile={this.props.viewed_tile}\n            tiles={this.props.tile_palette_tiles}\n          />\n        </span>\n        <span className={this.state.value === 1 ? '' : 'hidden'}>\n          <Layers \n            layers={this.props.layers}\n            current_layer={this.props.current_layer}\n            handleAddLayer={this.props.handleAddLayer}\n            handleSwapLayer={this.props.handleSwapLayer}\n            handleRemoveLayer={this.props.handleRemoveLayer}\n            handleEditLayer={this.props.handleEditLayer}\n          />\n        </span>\n        <span className={this.state.value === 2 ? '' : 'hidden'}>\n          <Settings\n            cols={this.props.cols} \n            rows={this.props.rows} \n            tiles={this.props.tiles} \n            empty_tile={this.props.empty_tile} \n            onUpdateGridSize={this.props.onUpdateGridSize}\n          />\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default ToolPanel;","import React, { Component } from \"react\";\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nexport class Toolbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      can_hotkey: false,\n    }\n  }\n\n  render() {\n    return (\n      <div className='Toolbar'>\n        <Tooltip title='pencil'>\n          <Button \n            className='btn-tool' \n            onClick={() => {this.props.onToolSwitch('pencil')}} \n            variant={this.props.tool_in_use === 'pencil' ? 'contained' : 'outlined'}\n            color=\"secondary\"\n          >\n            <i className=\"material-icons\">\n              edit\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='eraser'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onToolSwitch('eraser')}}  \n            variant={this.props.tool_in_use === 'eraser' ? 'contained' : 'outlined'} \n            color=\"secondary\"\n          >\n            <i className=\"material-icons\">\n              indeterminate_check_box\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='fill'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onToolSwitch('filler')}}  \n            variant={this.props.tool_in_use === 'filler' ? 'contained' : 'outlined'} \n            color=\"secondary\"\n          >\n            <i className=\"material-icons\">\n              format_color_fill\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='box paint'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onToolSwitch('box_paint')}} \n            variant={this.props.tool_in_use === 'box_paint' ? 'contained' : 'outlined'} \n            color=\"secondary\"\n            disabled\n          >\n            <i className=\"material-icons\">\n              select_all\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='undo'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onUndo()}}  \n            variant='contained'\n            color=\"secondary\"\n            disabled={this.props.tile_history_index >= this.props.tile_history.length - 1}\n          >\n            <i className=\"material-icons\">\n              undo\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='redo'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onRedo()}}  \n            variant='contained'\n            color=\"secondary\"\n            disabled={this.props.tile_history_index <= 0}\n          >\n            <i className=\"material-icons\">\n              redo\n            </i>\n          </Button>\n        </Tooltip>\n      </div>\n    );\n  }\n}\n\nexport default Toolbar","import React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nconst SaveList = ({ saves, onDeleteSave, onLoadSave }) => (\n  <div className='SaveList'>\n    <Grid container spacing={24}>\n      {\n        saves.map((save, index) => {\n          return (\n            <Grid key={index} item xs={12}>\n              <Button\n                color=\"primary\"\n                variant='contained'\n                aria-label=\"save\"\n                onClick={() => {\n                  onLoadSave(save.id);\n                }}\n              >\n                Load {save.timestamp.toString()}\n              </Button>\n              <Button\n                color=\"secondary\"\n                variant='contained'\n                aria-label=\"delete save\"\n                onClick={() => {\n                  onDeleteSave(save.id);\n                }}\n              >\n                <i className=\"material-icons\">\n                  delete\n                </i>\n              </Button>\n            </Grid>\n          )\n        })\n      }\n    </Grid>\n  </div>\n);\n\nexport default SaveList;","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(\"rect\", {\n  fill: \"#4553b3\",\n  fillOpacity: 1,\n  height: 512,\n  width: 512,\n  rx: 80,\n  ry: 80\n});\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M249.284 26.032a230.014 230.014 0 0 0-155.95 67.28 230.107 230.107 0 0 0 262.634 369.956 30.059 30.059 0 0 0 49.717-32.61c4.441-3.82 8.76-7.823 12.952-12.008A228.511 228.511 0 0 0 486 255.964 230.014 230.014 0 0 0 249.284 26.032zm8.002 14.89a214.839 214.839 0 0 1 150.299 366.596 236.298 236.298 0 0 1-11.997 11.087 30.059 30.059 0 0 0-46.585 30.582 214.839 214.839 0 1 1-91.717-408.265zm-7.952 62.712a152.485 152.485 0 0 0-103.836 47.257v6.708h24.853l7.85 16.304 20.274-4.576 25.506-1.957 26.786 13.08 13.744 13.789-8.526 11.74-26.786 5.229 13.695 19.262 4.659 7.267-12.472 18.227-18.962-5.334-16.304 6.662-5.88 12.124h-25.506l-10.366-12.974v-23.539L139 230.458l-9.806 20.16-3.273 25.984 8.5 20.963 16.305 18.307 7.293 22.885-6.64 7.85-22.965-7.07A152.566 152.566 0 0 0 402.31 212.873l-11.578 33.867-55.552 50.789-11.157-14.779 24.34-44.99-.757-27.216-23.583 15.651-7.186-27.298 30.78-63.729h1.422a152.485 152.485 0 0 0-99.705-31.534zm32.086 171.091l18.634 4.416 5.951 29.115-29.72 27.858-4.577 49.881-19.426 11.517-13.113-30.151-29.314-16.737-13.266-37.081 12.625-27.836 72.206-10.982z\",\n  fill: \"#ffffff\",\n  fillOpacity: 1\n});\n\nvar SvgComponent = function SvgComponent(props) {\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 512 512\",\n    style: {\n      \"height\": 512,\n      \"width\": 512\n    }\n  }, props), _ref, React.createElement(\"g\", {\n    className: \"\",\n    transform: \"translate(0,0)\",\n    style: {\n      \"touchAction\": \"none\"\n    }\n  }, _ref2));\n};\n\nexport default __webpack_public_path__ + \"static/media/logo.4b4ceabc.svg\";\nexport { SvgComponent as ReactComponent };","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, HashRouter } from 'react-router-dom';\nimport { AnimatedSwitch } from 'react-router-transition';\nimport './App.scss';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport JsonView from './Components/JsonView';\nimport TileMap from './Components/TileMap';\nimport ToolPanel from './Components/ToolPanel';\nimport GridToolbar from './Components/Toolbar';\nimport SaveList from './Components/SaveList';\nimport Grid from '@material-ui/core/Grid';\nimport { ReactComponent as Logo } from './logo.svg';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    const cols = 36;\n    const rows = 20;\n    const tile_size = 32;\n    const tile_gutter = 8;\n    const empty_tile = { type: 0, character: '', color: 'white', data: null };\n    const tiles = new Array(cols * rows).fill({ ...empty_tile });\n    const local_storage_key = 'ascii_map_maker';\n    let saves = [];\n    try {\n      if (localStorage.getItem(local_storage_key)) {\n        saves = JSON.parse(localStorage.getItem(local_storage_key));\n      }\n    } catch(e) {\n      console.log('get saves error');\n    }\n\n    this.state = {\n      local_storage_key,\n      show_saves: false,\n      saves,\n      default_cols: cols,\n      default_rows: rows,\n      tile_size,\n      tile_gutter,\n      empty_tile,\n      tile_history_max: 10,\n      selected_tile: {\n        character: '#',\n        color: '#fff',\n        data: null,\n      },\n      viewed_tile_id: null,\n      viewed_tile: '',\n      tile_palette_tiles: [\n        {\n          id: 1,\n          label: 'land',\n          color: '#298',\n          character: 'L',\n          data: {type: 'province', owner: 'Oda'}\n        },\n        {\n          id: 2,\n          label: 'water',\n          color: '#ace',\n          character: '~',\n          data: {type: 'natural', owner: 'none'}\n        },\n        {\n          id: 3,\n          label: 'mountain',\n          color: '#bbb',\n          character: 'M',\n          data: {type: 'natural', owner: 'none'}\n        },\n        {\n          id: 4,\n          label: 'army',\n          color: '#f44',\n          character: '@',\n          data: {type: 'troop', owner: 'Oda'}\n        },\n      ],\n      tool_in_use: 'pencil',\n      layers: [\n        {\n          id: 1,\n          name: 'Base',\n          cols,\n          rows,\n          tiles,\n          tile_history: [JSON.stringify(tiles)],\n          tile_history_index: 0,\n          deletable: false,\n        },\n        {\n          id: 2,\n          name: 'Base 2',\n          cols,\n          rows,\n          tiles,\n          tile_history: [JSON.stringify(tiles)],\n          tile_history_index: 0,\n          deletable: true,\n        },\n      ],\n      current_layer: 0,\n    }\n  }\n\n  handleToolSwitch (tool_in_use) {\n    this.setState({tool_in_use});\n  }\n\n  handleUndo () {\n    let tile_history_index = this.state.layers[this.state.current_layer].tile_history_index + 1\n    let tiles = JSON.parse(this.state.layers[this.state.current_layer].tile_history[tile_history_index])\n    let layers = [...this.state.layers];\n    layers[this.state.current_layer].tiles = tiles;\n    layers[this.state.current_layer].tile_history_index = tile_history_index;\n    this.setState({\n      layers\n    })\n  }\n  \n  handleRedo () {\n    let tile_history_index = this.state.layers[this.state.current_layer].tile_history_index - 1\n    let tiles = JSON.parse(this.state.layers[this.state.current_layer].tile_history[tile_history_index])\n    let layers = [...this.state.layers];\n    layers[this.state.current_layer].tiles = tiles;\n    layers[this.state.current_layer].tile_history_index = tile_history_index;\n    this.setState({\n      layers\n    })\n  }\n\n  handleSwapSelectedTile (selected_tile_properties) {\n    let tool_in_use = this.state.tool_in_use === 'eraser' ? 'pencil' : this.state.tool_in_use\n    this.setState({selected_tile: selected_tile_properties, tool_in_use});\n  }\n \n  handleSwapViewedTile (id, value) {\n    this.setState({\n      viewed_tile_id: id,\n      viewed_tile: value\n    });\n  }\n\n  handleUpdateTilePaletteTiles (tile_palette_tiles) {\n    this.setState({ tile_palette_tiles });\n  }\n\n  handleUpdateTiles (tiles) {\n    const tile_history_index = this.state.layers[this.state.current_layer].tile_history_index;\n    let tile_history = [\n      JSON.stringify(tiles),\n      ...this.state.layers[this.state.current_layer].tile_history\n    ].slice(\n      tile_history_index,\n      this.state.tile_history_max\n    )\n\n    let layers = [...this.state.layers];\n    layers[this.state.current_layer].tile_history_index = 0;\n    layers[this.state.current_layer].tiles = tiles;\n    layers[this.state.current_layer].tile_history = tile_history;\n    \n    this.setState({\n      layers\n    })\n  }\n  \n  handleUpdateGridSize (cols, rows, tiles) {\n    let layers = [...this.state.layers];\n    layers[this.state.current_layer].cols = cols;\n    layers[this.state.current_layer].rows = rows;\n    layers[this.state.current_layer].tiles = tiles;\n\n    this.setState({\n      layers\n    })\n  }\n\n  handleAddLayer (new_layer) {\n    const tiles = new Array(this.state.default_cols * this.state.default_rows).fill({ ...this.state.empty_tile });\n    \n    let layers = [...this.state.layers];\n    let next_id = layers.length > 0 ? layers[layers.length - 1].id + 1 : 1;\n    new_layer.id = next_id;\n    new_layer.tiles = tiles;\n    new_layer.cols = this.state.default_cols;\n    new_layer.rows = this.state.default_rows;\n    new_layer.tile_history = [JSON.stringify(tiles)];\n    new_layer.tile_history_index = 0;\n    new_layer.deletable = true;\n\n    layers = layers.concat(new_layer);\n    this.setState({layers},\n      () => {\n        this.handleSwapLayer(next_id);\n      }\n    );\n  }\n\n  handleSwapLayer(id) {\n    this.setState({current_layer: id - 1})\n  }\n\n  handleRemoveLayer(id) {\n    let layers = [...this.state.layers].filter((layer) => layer.id !== id);\n    this.setState({layers, current_layer: 0});\n  }\n\n  handleEditLayer(id, name) {\n    let layers = [...this.state.layers].map((layer) => {\n      if (layer.id === id) {\n        layer.name = name;\n      }\n      return layer;\n    });\n    this.setState({layers});\n  }\n\n  handleToggleSaves (value) {\n    this.setState({\n      show_saves: value,\n    })\n  }\n\n  handleSaveStateToLocalStorage () {\n    let local_saves = JSON.parse(localStorage.getItem(this.state.local_storage_key));\n    let next_id  = 1;\n    if (local_saves) {\n      next_id = local_saves.length > 0 ? local_saves[local_saves.length - 1].id + 1 : 1;\n    }\n    let new_save = {\n      id: next_id,\n      timestamp: new Date(),\n      data: this.state,\n    }\n\n    let saves = local_saves !== null ? [...local_saves, new_save] : [new_save];\n\n    try {\n      localStorage.setItem(this.state.local_storage_key, JSON.stringify(saves));\n      this.setState({saves})\n    } catch(error) {\n      alert('Local storage is full');\n    }\n  }\n  \n  handleLoadStateFromLocalStorage (id) {\n    let save = this.state.saves.filter((save) => save.id === id);\n    if (save.length > 0) {\n      let new_state = {...save[0].data, saves: [...this.state.saves]}\n      this.setState(new_state);\n    }\n    this.handleToggleSaves(false);\n  }\n\n  handleDeleteStateFromLocalStorage (id) {\n    let local_saves = JSON.parse(localStorage.getItem(this.state.local_storage_key));\n    let remaining_saves = local_saves.filter((save) => save.id !== id);\n    localStorage.setItem(this.state.local_storage_key, JSON.stringify(remaining_saves));\n    this.setState({ saves: remaining_saves });\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"App\">\n          <AppBar className=\"NavBar\" position=\"static\">\n            <Toolbar>\n              <Logo className='Logo'/>\n              <h5 className=\"nav-title\" onClick={() => { window.location = '#/' }}>ASCII Map Maker</h5>\n              <GridToolbar \n                onToolSwitch={this.handleToolSwitch.bind(this)}\n                onUndo={this.handleUndo.bind(this)}\n                onRedo={this.handleRedo.bind(this)}\n                tile_history={this.state.layers[this.state.current_layer].tile_history}\n                tile_history_index={this.state.layers[this.state.current_layer].tile_history_index}\n                selected_tile={this.state.selected_tile}\n                tool_in_use={this.state.tool_in_use}\n              />\n              <div className='nav-buttons-right'>\n                <Button \n                  variant='contained'\n                  color='secondary'\n                  onClick={this.handleSaveStateToLocalStorage.bind(this)}\n                >\n                  Save\n                </Button>\n                <Button \n                  variant='contained'\n                  color='secondary'\n                  disabled={!this.state.saves.length}\n                  onClick={() => {this.handleToggleSaves(!this.state.show_saves)}}\n                >\n                  Load\n                </Button>\n                <Button color=\"inherit\" onClick={() => {window.location = '#/export'}}>Export</Button>\n              </div>\n            </Toolbar>\n          </AppBar>\n          {\n            this.state.show_saves && (\n              <SaveList\n                saves={this.state.saves}\n                onLoadSave={this.handleLoadStateFromLocalStorage.bind(this)}\n                onDeleteSave={this.handleDeleteStateFromLocalStorage.bind(this)}\n              />\n            )\n          }\n          <AnimatedSwitch\n            atEnter={{ opacity: 0 }}\n            atLeave={{ opacity: 0 }}\n            atActive={{ opacity: 1 }}\n            className=\"fade\"\n          >\n            <Route exact path={'/'} render={(props) => (\n              <Grid container >\n                <Grid item xs={12} sm={8}>\n                  <TileMap\n                    cols={this.state.layers[this.state.current_layer].cols}\n                    rows={this.state.layers[this.state.current_layer].rows}\n                    tiles={this.state.layers[this.state.current_layer].tiles}\n                    tile_size={32}\n                    tile_gutter={8}\n                    selected_tile={{ ...this.state.selected_tile }}\n                    viewed_tile={this.state.viewed_tile}\n                    onUpdateTiles={this.handleUpdateTiles.bind(this)}\n                    tool_in_use={this.state.tool_in_use}\n                    empty_tile={this.state.empty_tile}\n                  />\n                </ Grid>\n                <Grid item xs={12} sm={4}>\n                  <ToolPanel \n                    layers={this.state.layers}\n                    current_layer={this.state.current_layer}\n                    cols={this.state.layers[this.state.current_layer].cols}\n                    rows={this.state.layers[this.state.current_layer].rows}\n                    tiles={this.state.layers[this.state.current_layer].tiles}\n                    empty_tile={this.state.empty_tile}\n                    selected_tile={this.state.selected_tile}\n                    viewed_tile_id={this.state.viewed_tile_id}\n                    viewed_tile={this.state.viewed_tile}\n                    tile_palette_tiles={this.state.tile_palette_tiles}\n                    handleUpdateTilePaletteTiles={this.handleUpdateTilePaletteTiles.bind(this)} \n                    handleSwapSelectedTile={this.handleSwapSelectedTile.bind(this)} \n                    handleSwapViewedTile={this.handleSwapViewedTile.bind(this)} \n                    handleAddLayer={this.handleAddLayer.bind(this)} \n                    handleSwapLayer={this.handleSwapLayer.bind(this)} \n                    handleRemoveLayer={this.handleRemoveLayer.bind(this)} \n                    handleEditLayer={this.handleEditLayer.bind(this)} \n                    onUpdateGridSize={this.handleUpdateGridSize.bind(this)} \n                  />\n                </ Grid>\n              </ Grid>\n            )} />\n            <Route path={'/export'} render={\n              (props) => (\n                <JsonView \n                  cols={this.state.layers[this.state.current_layer].cols}\n                  rows={this.state.layers[this.state.current_layer].rows}\n                  tiles={this.state.layers[this.state.current_layer].tiles} \n                />\n              )} \n            />\n          </AnimatedSwitch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}