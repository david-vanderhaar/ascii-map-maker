{"version":3,"sources":["Components/JsonView.js","Components/Tiles.js","Components/TileMap.js","Components/TileForm.js","Components/TilePalette.js","Components/RegionViewer.js","Components/ToolPanel.js","Components/Toolbar.js","App.js","serviceWorker.js","index.js"],"names":["JsonView","_ref","cols","rows","tiles","react_default","a","createElement","className","Grid_default","container","spacing","item","xs","sm","Button_default","color","variant","aria-label","onClick","document","getElementById","select","execCommand","TextField_default","id","label","multiline","fullWidth","rowsMax","value","JSON","stringify","margin","TextTile","Component","_Component2","props","_this2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","onUpdateTile","x","y","handleMouseOver","mouse_down","setState","is_hovering","handleMouseOut","state","character","fill","hover_fill","inherits","createClass","key","ReactKonva","text","fontSize","align","verticalAlign","width","tile_size","height","onMouseOver","onMouseOut","TileMap","_this","col","row","c","r","tile","getTile","push","Tiles_TextTile","concat","handleUpdateTile","bind","prev_tile","new_tile","current_tile","parse","floodFillUtil","tool_in_use","type","selected_tile","objectSpread","empty_tile","floodFill","onUpdateTiles","onMouseDown","handleMouseDown","onMouseUp","handleMouseUp","drawTiles","map","TileForm","handleChange","name","event","defineProperty","target","tile_label","tile_character","tile_color","tile_data","data","handleAddTile","defaultValue","onChange","InputProps","startAdornment","InputAdornment_default","position","placeholder","onSubmit","TilePlate","handleSwapSelectedTile","handleRemoveTile","TilePalette","owner","form_is_visible","index","TilePalette_TilePlate","toConsumableArray","tile_id","length","filter","drawTilePlates","handleToggleForm","Components_TileForm","RegionViewer","ToolPanel","AppBar_default","Tabs_default","Tab_default","Components_TilePalette","Components_RegionViewer","Toolbar","_Component","apply","arguments","onToolSwitch","disabled","App","tile_gutter","Array","selected_tile_properties","HashRouter","Toolbar_default","window","location","Components_Toolbar","handleToolSwitch","es","atEnter","opacity","atLeave","atActive","Route","exact","path","render","Components_TileMap","handleUpdateTiles","Components_ToolPanel","Components_JsonView","Boolean","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2YAwCeA,EAlCE,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,KAAMC,EAAfH,EAAeG,MAAf,OACfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAMI,WAAS,EAACC,QAAS,IACvBN,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEU,MAAM,UACNC,QAAQ,YACRC,aAAW,OACXC,QAAS,WACPC,SAASC,eAAe,oBAAoBC,SAC5CF,SAASG,YAAY,UANzB,sBAYFlB,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBT,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CACEmB,GAAG,mBACHC,MAAM,OACNC,WAAS,EACTC,WAAS,EACTC,QAAQ,IACRC,MAAOC,KAAKC,UAAU,CACpB9B,OAAMC,OAAMC,UAEd6B,OAAO,SACPhB,QAAQ,0CCFLiB,GA3BoBC,YA2BjC,SAAAC,GACE,SAAAF,EAAYG,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAP,IACjBI,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAL,GAAAU,KAAAH,KAAMJ,KASRQ,YAAc,WACZP,EAAKD,MAAMS,aAAaR,EAAKD,MAAMU,EAAGT,EAAKD,MAAMW,IAXhCV,EAcnBW,gBAAkB,WAIZX,EAAKD,MAAMa,YACbZ,EAAKD,MAAMS,aAAaR,EAAKD,MAAMU,EAAGT,EAAKD,MAAMW,GAEnDV,EAAKa,SANW,CACdC,aAAa,KAhBEd,EAwBnBe,eAAiB,WACff,EAAKa,SAAS,CACZC,aAAa,KAxBfd,EAAKgB,MAAQ,CACXC,UAAWlB,EAAMkB,UACjBC,KAAMnB,EAAMrB,MACZyC,WAAY,MACZL,aAAa,GANEd,EADrB,OAAAC,OAAAmB,EAAA,EAAAnB,CAAAL,EAAAE,GAAAG,OAAAoB,EAAA,EAAApB,CAAAL,EAAA,EAAA0B,IAAA,SAAA9B,MAAA,WAgCI,OACEzB,EAAAC,EAAAC,cAACsD,EAAA,KAAD,CACEC,KAAMrB,KAAKJ,MAAMkB,UACjBC,KAAMf,KAAKa,MAAMF,YAAcX,KAAKa,MAAMG,WAAYhB,KAAKJ,MAAMrB,MACjE+B,EAAGN,KAAKJ,MAAMU,EACdC,EAAGP,KAAKJ,MAAMW,EACde,SAAU,GACVC,MAAM,SACNC,cAAc,SACdC,MAAOzB,KAAKJ,MAAM8B,UAClBC,OAAQ3B,KAAKJ,MAAM8B,UACnBhD,QAASsB,KAAKI,YACdwB,YAAa5B,KAAKQ,gBAClBqB,WAAY7B,KAAKY,qBA7CzBnB,EAAA,CAA8BC,cC+FfoC,cAzHb,SAAAA,EAAYlC,GAAO,IAAAmC,EAAA,OAAAjC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,IACjBC,EAAAjC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgC,GAAA3B,KAAAH,KAAMJ,KACDiB,MAAQ,CACXJ,YAAY,GAHGsB,uEAOVC,EAAKC,GACZ,OAAOjC,KAAKJ,MAAMjC,MAAMsE,EAAMjC,KAAKJ,MAAMnC,KAAOuE,uCAKhD,IADA,IAAIrE,EAAQ,GACHuE,EAAI,EAAGA,EAAIlC,KAAKJ,MAAMnC,KAAMyE,IACnC,IAAK,IAAIC,EAAI,EAAGA,EAAInC,KAAKJ,MAAMlC,KAAMyE,IAAK,CACxC,IAAIC,EAAOpC,KAAKqC,QAAQH,EAAGC,GAC3BxE,EAAM2E,KACJ1E,EAAAC,EAAAC,cAACyE,EAAD,CACEpB,IAAG,GAAAqB,OAAKN,EAAL,KAAAM,OAAUL,GACb7B,EAAG4B,EAAIlC,KAAKJ,MAAM8B,UAClBnB,EAAG4B,EAAInC,KAAKJ,MAAM8B,UAClBZ,UAAWsB,EAAKtB,UAChBvC,MAAO6D,EAAK7D,MACZmD,UAAW1B,KAAKJ,MAAM8B,UACtBjB,WAAYT,KAAKa,MAAMJ,WACvBJ,aAAcL,KAAKyC,iBAAiBC,KAAK1C,SAMjD,OAAOrC,wCAGMF,EAAMC,EAAMC,EAAO2C,EAAGC,EAAGoC,EAAWC,GAEjD,IAAIC,EAAelF,EAAM4C,EAAI9C,EAAO6C,GAEpC,OAAIA,EAAI,GAAKA,GAAK7C,GAAQ8C,EAAI,GAAKA,GAAK7C,EAAeC,EACnD2B,KAAKC,UAAUsD,KAAkBvD,KAAKC,UAAUoD,GAAqBhF,GAGzEA,EAAM4C,EAAI9C,EAAO6C,GAAKhB,KAAKwD,MAAMxD,KAAKC,UAAUqD,IAGhD5C,KAAK+C,cAActF,EAAMC,EAAMC,EAAO2C,EAAI,EAAGC,EAAGoC,EAAWC,GAC3D5C,KAAK+C,cAActF,EAAMC,EAAMC,EAAO2C,EAAI,EAAGC,EAAGoC,EAAWC,GAC3D5C,KAAK+C,cAActF,EAAMC,EAAMC,EAAO2C,EAAGC,EAAI,EAAGoC,EAAWC,GAC3D5C,KAAK+C,cAActF,EAAMC,EAAMC,EAAO2C,EAAGC,EAAI,EAAGoC,EAAWC,GAEpDjF,qCAIEF,EAAMC,EAAMC,EAAO2C,EAAGC,EAAGqC,GAElC,IAAID,EAAYhF,EAAM4C,EAAI9C,EAAO6C,GACjC,OAAON,KAAK+C,cAActF,EAAMC,EAAMC,EAAO2C,EAAGC,EAAGoC,EAAWC,4CAG9CtC,EAAGC,GACnB,IAAMyB,EAAM1B,EAAIN,KAAKJ,MAAM8B,UACrBO,EAAM1B,EAAIP,KAAKJ,MAAM8B,UACvB/D,EAAQ2B,KAAKwD,MAAMxD,KAAKC,UAAUS,KAAKJ,MAAMjC,QAEjD,OAAQqC,KAAKJ,MAAMoD,aACjB,IAAK,SACHrF,EAAMsE,EAAMjC,KAAKJ,MAAMnC,KAAOuE,GAAQ,CACpCiB,KAAM,EACNnC,UAAWd,KAAKJ,MAAMsD,cAAcpC,UACpCvC,MAAOyB,KAAKJ,MAAMsD,cAAc3E,OAElC,MACF,IAAK,SACHZ,EAAMsE,EAAMjC,KAAKJ,MAAMnC,KAAOuE,GAA9BlC,OAAAqD,EAAA,EAAArD,CAAA,GAA2CE,KAAKJ,MAAMwD,YACtD,MACF,IAAK,SACC9D,KAAKC,UAAU5B,EAAMsE,EAAMjC,KAAKJ,MAAMnC,KAAOuE,MAAU1C,KAAKC,UAAUS,KAAKJ,MAAMsD,iBACnFvF,EAAQqC,KAAKqD,UAAUrD,KAAKJ,MAAMnC,KAAMuC,KAAKJ,MAAMlC,KAAMC,EAAOqE,EAAKC,EAAKjC,KAAKJ,MAAMsD,gBAEvF,MACF,QACEvF,EAAMsE,EAAMjC,KAAKJ,MAAMnC,KAAOuE,GAAQ,CACpCiB,KAAM,EACNnC,UAAWd,KAAKJ,MAAMsD,cAAcpC,UACpCvC,MAAOyB,KAAKJ,MAAMsD,cAAc3E,OAGtCyB,KAAKJ,MAAM0D,cAAc3F,6CAIzBqC,KAAKU,SAAS,CAACD,YAAY,4CAI3BT,KAAKU,SAAS,CAACD,YAAY,qCAI3B,OACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACsD,EAAA,MAAD,CACEK,MAAOzB,KAAKJ,MAAMnC,KAAOuC,KAAKJ,MAAM8B,UACpCC,OAAQ3B,KAAKJ,MAAMlC,KAAOsC,KAAKJ,MAAM8B,UACrC6B,YAAavD,KAAKwD,gBAAgBd,KAAK1C,MACvCyD,UAAWzD,KAAK0D,cAAchB,KAAK1C,OAEnCpC,EAAAC,EAAAC,cAACsD,EAAA,MAAD,KAEIpB,KAAK2D,YAAYC,IAAI,SAACxB,GACpB,OAAOA,cAhHD1C,mFC4FPmE,cA1Fb,SAAAA,EAAYjE,GAAO,IAAAmC,EAAA,OAAAjC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6D,IACjB9B,EAAAjC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+D,GAAA1D,KAAAH,KAAMJ,KASRkE,aAAe,SAAAC,GAAI,OAAI,SAAAC,GACrBjC,EAAKrB,SAALZ,OAAAmE,EAAA,EAAAnE,CAAA,GACGiE,EAAOC,EAAME,OAAO7E,UAVvB0C,EAAKlB,MAAQ,CACXsD,WAAY,GACZC,eAAgB,GAChBC,WAAY,GACZC,UAAW,IANIvC,0EAiBjB,IAAIa,EAAW,CACb3D,MAAOe,KAAKa,MAAMsD,WAClBrD,UAAWd,KAAKa,MAAMuD,eACtB7F,MAAOyB,KAAKa,MAAMwD,WAClBE,KAAKzE,OAAAqD,EAAA,EAAArD,CAAA,GAAKE,KAAKa,MAAMyD,YAGvBtE,KAAKJ,MAAM4E,cAAc5B,oCAIzB,OACEhF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CACEmB,GAAG,aACHC,MAAM,QACNlB,UAAW,aACX0G,aAAczE,KAAKa,MAAMsD,WACzBO,SAAU1E,KAAK8D,aAAa,cAC5BtE,OAAO,SACPhB,QAAQ,aAEVZ,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CACEmB,GAAG,iBACHC,MAAM,YACNlB,UAAW,aACX0G,aAAczE,KAAKa,MAAMuD,eACzBM,SAAU1E,KAAK8D,aAAa,kBAC5BtE,OAAO,SACPhB,QAAQ,aAEVZ,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CACEmB,GAAG,aACHC,MAAM,YACNlB,UAAW,aACX0G,aAAczE,KAAKa,MAAMwD,WACzBK,SAAU1E,KAAK8D,aAAa,cAC5BtE,OAAO,SACPhB,QAAQ,WACRmG,WAAY,CACVC,eAAgBhH,EAAAC,EAAAC,cAAC+G,EAAAhH,EAAD,CAAgBiH,SAAS,SAAzB,QAGpBlH,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CACEmB,GAAG,YACHC,MAAM,OACN8F,YAAY,iBAGZ7F,WAAS,EACTuF,aAAczE,KAAKa,MAAMyD,UACzBI,SAAU1E,KAAK8D,aAAa,aAC5B/F,UAAW,aACXyB,OAAO,SACPhB,QAAQ,aAEVZ,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEW,QAAQ,WACRD,MAAM,UACNR,UAAU,iBACVW,QAASsB,KAAKgF,SAAStC,KAAK1C,OAE5BpC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,kBAjFW2B,aCDjBuF,EAAY,SAAAzH,GAAA,IAAEwB,EAAFxB,EAAEwB,GAAIC,EAANzB,EAAMyB,MAAOV,EAAbf,EAAae,MAAOuC,EAApBtD,EAAoBsD,UAAWyD,EAA/B/G,EAA+B+G,KAAMW,EAArC1H,EAAqC0H,uBAAwBC,EAA7D3H,EAA6D2H,iBAA7D,OAChBvH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEW,QAAQ,YACRD,MAAM,UACNG,QAAS,WACPwG,EAAuB,CAACpE,YAAWvC,QAAOgG,WAG3CtF,GAEHrB,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEU,MAAM,YACNE,aAAW,cACXC,QAAS,WAAOyG,EAAiBnG,KAEjCpB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,aAoHSqH,cA5Gb,SAAAA,EAAYxF,GAAO,IAAAmC,EAAA,OAAAjC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoF,IACjBrD,EAAAjC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsF,GAAAjF,KAAAH,KAAMJ,KACDiB,MAAQ,CACXlD,MAAO,CACL,CACEqB,GAAI,EACJC,MAAO,OACPV,MAAO,OACPuC,UAAW,IACXyD,KAAM,CAACtB,KAAM,WAAYoC,MAAO,QAElC,CACErG,GAAI,EACJC,MAAO,QACPV,MAAO,OACPuC,UAAW,IACXyD,KAAM,CAACtB,KAAM,UAAWoC,MAAO,SAEjC,CACErG,GAAI,EACJC,MAAO,WACPV,MAAO,OACPuC,UAAW,IACXyD,KAAM,CAACtB,KAAM,UAAWoC,MAAO,SAEjC,CACErG,GAAI,EACJC,MAAO,OACPV,MAAO,OACPuC,UAAW,IACXyD,KAAM,CAACtB,KAAM,QAASoC,MAAO,SAGjCC,iBAAiB,GAjCFvD,gFAqCD,IAAAlC,EAAAG,KAChB,OAAOA,KAAKa,MAAMlD,MAAMiG,IAAI,SAACxB,EAAMmD,GACjC,OACE3H,EAAAC,EAAAC,cAAC0H,EAAD,CACErE,IAAKoE,EACLvG,GAAIoD,EAAKpD,GACTC,MAAOmD,EAAKnD,MACZV,MAAO6D,EAAK7D,MACZuC,UAAWsB,EAAKtB,UAChByD,KAAIzE,OAAAqD,EAAA,EAAArD,CAAA,GAAMsC,EAAKmC,MACfW,uBAAwBrF,EAAKD,MAAMsF,uBACnCC,iBAAkBtF,EAAKsF,iBAAiBzC,KAAK7C,kDAOnDG,KAAKU,SAAS,CAAC4E,iBAAkBtF,KAAKa,MAAMyE,wDAG/B1C,GACb,IAAIjF,EAAKmC,OAAA2F,EAAA,EAAA3F,CAAOE,KAAKa,MAAMlD,OAEvB+H,EAAU,CAAC1G,GADDrB,EAAMgI,OAAS,EAAIhI,EAAMA,EAAMgI,OAAS,GAAG3G,GAAK,EAAI,GAElErB,EAAM2E,KAANxC,OAAAqD,EAAA,EAAArD,CAAA,GAAe4F,EAAY9C,IAC3B5C,KAAKU,SAAS,CACZ/C,QACA2H,iBAAiB,6CAIHtG,GAChB,IAAIrB,EAAQqC,KAAKa,MAAMlD,MAAMiI,OAAO,SAACxD,GAAD,OAAUA,EAAKpD,KAAOA,IAC1DgB,KAAKU,SAAS,CAAC/C,2CAIf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,qBACCkC,KAAK6F,iBACNjI,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEW,QAAQ,WACRD,MAAM,UACNR,UAAU,iBACVW,QAASsB,KAAK8F,iBAAiBpD,KAAK1C,OAGjCA,KAAKa,MAAMyE,gBAER1H,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,SAKAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,QAONiC,KAAKa,MAAMyE,iBAAmB1H,EAAAC,EAAAC,cAACiI,EAAD,CAAUvB,cAAexE,KAAKwE,cAAc9B,KAAK1C,gBAtG/DN,aCfXsG,mLARX,OACEpI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,6BAJmB4B,aCuCZuG,cAjCb,SAAAA,EAAYrG,GAAO,IAAAmC,EAAA,OAAAjC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiG,IACjBlE,EAAAjC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmG,GAAA9F,KAAAH,KAAMJ,KAMRkE,aAAe,SAACE,EAAO3E,GACrB0C,EAAKrB,SAAS,CAAErB,WANhB0C,EAAKlB,MAAQ,CACXxB,MAAO,GAHQ0C,wEAYjB,OACEnE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACoI,EAAArI,EAAD,CAAQE,UAAU,YAAY+G,SAAS,UACrClH,EAAAC,EAAAC,cAACqI,EAAAtI,EAAD,CAAMW,QAAQ,YAAYa,MAAOW,KAAKa,MAAMxB,MAAOqF,SAAU1E,KAAK8D,cAChElG,EAAAC,EAAAC,cAACsI,EAAAvI,EAAD,CAAKoB,MAAM,YACXrB,EAAAC,EAAAC,cAACsI,EAAAvI,EAAD,CAAKoB,MAAM,cAKfrB,EAAAC,EAAAC,cAAA,QAAMC,UAAgC,IAArBiC,KAAKa,MAAMxB,MAAc,GAAK,UAC7CzB,EAAAC,EAAAC,cAACuI,EAAD,CAAanB,uBAAwBlF,KAAKJ,MAAMsF,0BAElDtH,EAAAC,EAAAC,cAAA,QAAMC,UAAgC,IAArBiC,KAAKa,MAAMxB,MAAc,GAAK,UAC7CzB,EAAAC,EAAAC,cAACwI,EAAD,eA3Bc5G,aC8CT6G,EAlDf,SAAAC,GAAA,SAAAD,IAAA,OAAAzG,OAAAC,EAAA,EAAAD,CAAAE,KAAAuG,GAAAzG,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyG,GAAAE,MAAAzG,KAAA0G,YAAA,OAAA5G,OAAAmB,EAAA,EAAAnB,CAAAyG,EAAAC,GAAA1G,OAAAoB,EAAA,EAAApB,CAAAyG,EAAA,EAAApF,IAAA,SAAA9B,MAAA,WACW,IAAA0C,EAAA/B,KACP,OACEpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEE,UAAU,WACVW,QAAS,WAAOqD,EAAKnC,MAAM+G,aAAa,WACxCnI,QAAoC,WAA3BwB,KAAKJ,MAAMoD,YAA2B,YAAc,WAC7DzE,MAAM,aAENX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,SAIFH,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEE,UAAU,WACVW,QAAS,WAAQqD,EAAKnC,MAAM+G,aAAa,WACzCnI,QAAoC,WAA3BwB,KAAKJ,MAAMoD,YAA2B,YAAc,WAC7DzE,MAAM,aAENX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,4BAIFH,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEE,UAAU,WACVW,QAAS,WAAQqD,EAAKnC,MAAM+G,aAAa,WACzCnI,QAAoC,WAA3BwB,KAAKJ,MAAMoD,YAA2B,YAAc,WAC7DzE,MAAM,aAENX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,sBAIFH,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACEE,UAAU,WACVW,QAAS,WAAQqD,EAAKnC,MAAM+G,aAAa,cACzCnI,QAAoC,cAA3BwB,KAAKJ,MAAMoD,YAA8B,YAAc,WAChEzE,MAAM,YACNqI,UAAQ,GAERhJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,oBAzCVwI,EAAA,CAA6B7G,aC4GdmH,cAjGb,SAAAA,IAAc,IAAA9E,EAAAjC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6G,GAGZ,IAIMzD,EAAa,CAAEH,KAAM,EAAGnC,UAAW,GAAIvC,MAAO,SAPxC,OACZwD,EAAAjC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+G,GAAA1G,KAAAH,QAQKa,MAAQ,CACXpD,KAPW,GAQXC,KAPW,GAQXgE,UAPgB,GAQhBoF,YAPkB,EAQlB1D,aACAzF,MAAO,IAAIoJ,MAAMtJ,KAAasD,KAAvBjB,OAAAqD,EAAA,EAAArD,CAAA,GAAgCsD,IACvCF,cAAe,CACbpC,UAAW,IACXvC,MAAO,OACPgG,KAAM,MAERvB,YAAa,UArBHjB,gFAyBIiB,GAChBhD,KAAKU,SAAS,CAACsC,+DAGOgE,GACtB,IAAIhE,EAAyC,WAA3BhD,KAAKa,MAAMmC,YAA2B,SAAWhD,KAAKa,MAAMmC,YAC9EhD,KAAKU,SAAS,CAACwC,cAAe8D,EAA0BhE,0DAGvCrF,GACjBqC,KAAKU,SAAS,CAAC/C,2CAGR,IAAAkC,EAAAG,KACP,OACEpC,EAAAC,EAAAC,cAACmJ,EAAA,EAAD,KACErJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoI,EAAArI,EAAD,CAAQE,UAAU,SAAS+G,SAAS,UAClClH,EAAAC,EAAAC,cAACoJ,EAAArJ,EAAD,KACED,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAYW,QAAS,WAAQyI,OAAOC,SAAW,OAA7D,mBACAxJ,EAAAC,EAAAC,cAACuJ,EAAD,CACEV,aAAc3G,KAAKsH,iBAAiB5E,KAAK1C,MACzCkD,cAAelD,KAAKa,MAAMqC,cAC1BF,YAAahD,KAAKa,MAAMmC,cAE1BpF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQU,MAAM,UAAUG,QAAS,WAAOyI,OAAOC,SAAW,aAA1D,aAINxJ,EAAAC,EAAAC,cAACyJ,EAAA,EAAD,CACEC,QAAS,CAAEC,QAAS,GACpBC,QAAS,CAAED,QAAS,GACpBE,SAAU,CAAEF,QAAS,GACrB1J,UAAU,QAEVH,EAAAC,EAAAC,cAAC8J,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,SAACnI,GAAD,OAC9BhC,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAMI,WAAS,GACbL,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBT,EAAAC,EAAAC,cAACkK,EAAD,CACEvK,KAAMoC,EAAKgB,MAAMpD,KACjBC,KAAMmC,EAAKgB,MAAMnD,KACjBC,MAAOkC,EAAKgB,MAAMlD,MAClB+D,UAAW,GACXoF,YAAa,EACb5D,cAAapD,OAAAqD,EAAA,EAAArD,CAAA,GAAOD,EAAKgB,MAAMqC,eAC/BI,cAAezD,EAAKoI,kBAAkBvF,KAAK7C,GAC3CmD,YAAanD,EAAKgB,MAAMmC,YACxBI,WAAYvD,EAAKgB,MAAMuC,cAG3BxF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAMM,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrBT,EAAAC,EAAAC,cAACoK,EAAD,CAAWhD,uBAAwBrF,EAAKqF,uBAAuBxC,KAAK7C,UAI1EjC,EAAAC,EAAAC,cAAC8J,EAAA,EAAD,CAAOE,KAAM,UAAWC,OACtB,SAACnI,GAAD,OACEhC,EAAAC,EAAAC,cAACqK,EAAD,CACE1K,KAAMoC,EAAKgB,MAAMpD,KACjBC,KAAMmC,EAAKgB,MAAMnD,KACjBC,MAAOkC,EAAKgB,MAAMlD,qBAvFlB+B,aCDE0I,QACW,cAA7BjB,OAAOC,SAASiB,UAEe,UAA7BlB,OAAOC,SAASiB,UAEhBlB,OAAOC,SAASiB,SAASC,MACvB,2DCZNC,IAASR,OAAOnK,EAAAC,EAAAC,cAAC0K,EAAD,MAAS7J,SAASC,eAAe,SD2H3C,kBAAmB6J,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.245a17fe.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\n\n\nconst JsonView = ({ cols, rows, tiles }) => (\n  <div className='JsonView'>\n    <Grid container spacing={24}>\n      <Grid item xs={12} sm={4}>\n        <Button\n          color=\"primary\"\n          variant='contained'\n          aria-label=\"copy\"\n          onClick={() => { \n            document.getElementById('json-export-data').select();\n            document.execCommand(\"copy\");\n          }}\n        >\n          Copy to Clipboard \n        </Button>\n      </Grid>\n      <Grid item xs={12} sm={8}>\n        <TextField\n          id=\"json-export-data\"\n          label=\"Json\"\n          multiline\n          fullWidth\n          rowsMax=\"8\"\n          value={JSON.stringify({\n            cols, rows, tiles\n          })}\n          margin=\"normal\"\n          variant=\"outlined\"\n        />\n      </Grid>\n    </Grid>\n  </div>\n);\n\nexport default JsonView;","import React, { Component } from \"react\";\nimport Konva from \"konva\";\nimport { Rect, Text } from \"react-konva\";\n\nexport class ColoredRect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: \"black\"\n    };\n  }\n\n  handleClick = () => {\n    this.setState({\n      color: Konva.Util.getRandomColor()\n    });\n  };\n\n  render() {\n    return (\n      <Rect\n        x={this.props.x}\n        y={this.props.y}\n        width={this.props.tile_size - this.props.tile_gutter}\n        height={this.props.tile_size - this.props.tile_gutter}\n        onClick={this.handleClick}\n      />\n    );\n  }\n}\n\nexport class TextTile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      character: props.character,\n      fill: props.color,\n      hover_fill: 'red',\n      is_hovering: false,\n    };\n  }\n\n  handleClick = () => {\n    this.props.onUpdateTile(this.props.x, this.props.y)\n  };\n\n  handleMouseOver = () => {\n    let new_state = {\n      is_hovering: true,\n    }\n    if (this.props.mouse_down) {\n      this.props.onUpdateTile(this.props.x, this.props.y)\n    }\n    this.setState(new_state);\n  };\n\n  handleMouseOut = () => {\n    this.setState({\n      is_hovering: false,\n    });\n  };\n\n  render() {\n    return (\n      <Text\n        text={this.props.character}\n        fill={this.state.is_hovering ? this.state.hover_fill: this.props.color}\n        x={this.props.x}\n        y={this.props.y}\n        fontSize={16}\n        align='center'\n        verticalAlign='middle'\n        width={this.props.tile_size}\n        height={this.props.tile_size}\n        onClick={this.handleClick}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n      />\n    );\n  }\n}","import React, { Component } from \"react\";\nimport { Stage, Layer } from \"react-konva\";\nimport * as Tiles from './Tiles.js';\n\nclass TileMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mouse_down: false,\n    };\n  }\n\n  getTile (col, row) {\n    return this.props.tiles[row * this.props.cols + col]\n  }\n\n  drawTiles () {\n    let tiles = [];\n    for (let c = 0; c < this.props.cols; c++) {\n      for (let r = 0; r < this.props.rows; r++) {\n        let tile = this.getTile(c, r);\n        tiles.push(\n          <Tiles.TextTile\n            key={`${c}-${r}`}\n            x={c * this.props.tile_size}\n            y={r * this.props.tile_size}\n            character={tile.character}\n            color={tile.color}\n            tile_size={this.props.tile_size}\n            mouse_down={this.state.mouse_down}\n            onUpdateTile={this.handleUpdateTile.bind(this)}\n          />\n        )\n      }\n    }\n    \n    return tiles;\n  }\n\n  floodFillUtil (cols, rows, tiles, x, y, prev_tile, new_tile)\n  {\n    let current_tile = tiles[y * cols + x];\n    // Base cases \n    if (x < 0 || x >= cols || y < 0 || y >= rows) { return tiles; }\n    if (JSON.stringify(current_tile) !== JSON.stringify(prev_tile)) { return tiles; }\n    \n    // Replace the color at (x, y) \n    tiles[y * cols + x] = JSON.parse(JSON.stringify(new_tile));\n    \n    // Recur for north, east, south and west \n    this.floodFillUtil(cols, rows, tiles, x + 1, y, prev_tile, new_tile);\n    this.floodFillUtil(cols, rows, tiles, x - 1, y, prev_tile, new_tile);\n    this.floodFillUtil(cols, rows, tiles, x, y + 1, prev_tile, new_tile);\n    this.floodFillUtil(cols, rows, tiles, x, y - 1, prev_tile, new_tile);\n\n    return tiles;\n  }\n\n  // It mainly finds the previous color on (x, y) and \n  floodFill (cols, rows, tiles, x, y, new_tile)\n  {\n    let prev_tile = tiles[y * cols + x]\n    return this.floodFillUtil(cols, rows, tiles, x, y, prev_tile, new_tile);\n  } \n\n  handleUpdateTile (x, y) {\n    const col = x / this.props.tile_size;\n    const row = y / this.props.tile_size;\n    let tiles = JSON.parse(JSON.stringify(this.props.tiles)); // cheap deep clone\n\n    switch (this.props.tool_in_use) {\n      case 'pencil':\n        tiles[row * this.props.cols + col] = ({\n          type: 1,\n          character: this.props.selected_tile.character,\n          color: this.props.selected_tile.color,\n        });\n        break;\n      case 'eraser':\n        tiles[row * this.props.cols + col] = ({ ...this.props.empty_tile })\n        break;\n      case 'filler':\n        if (JSON.stringify(tiles[row * this.props.cols + col]) !== JSON.stringify(this.props.selected_tile)) {\n          tiles = this.floodFill(this.props.cols, this.props.rows, tiles, col, row, this.props.selected_tile)\n        }\n        break;\n      default:\n        tiles[row * this.props.cols + col] = ({\n          type: 1,\n          character: this.props.selected_tile.character,\n          color: this.props.selected_tile.color,\n        });\n    }\n    this.props.onUpdateTiles(tiles)\n  }\n\n  handleMouseDown () {\n    this.setState({mouse_down: true})\n  }\n\n  handleMouseUp () {\n    this.setState({mouse_down: false})\n  }\n\n  render() {\n    return (\n      <div className='TileMap'>\n        <Stage \n          width={this.props.cols * this.props.tile_size} \n          height={this.props.rows * this.props.tile_size}\n          onMouseDown={this.handleMouseDown.bind(this)} \n          onMouseUp={this.handleMouseUp.bind(this)}\n        >\n          <Layer>\n            {\n              this.drawTiles().map((tile) => {\n                return tile;\n              })\n            }\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n}\n\nexport default TileMap;\n","import React, { Component } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\n\nclass TileForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tile_label: '',\n      tile_character: '',\n      tile_color: '',\n      tile_data: '',\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  onSubmit () {\n    let new_tile = {\n      label: this.state.tile_label,\n      character: this.state.tile_character,\n      color: this.state.tile_color,\n      data: {...this.state.tile_data},\n    }\n    \n    this.props.handleAddTile(new_tile);\n  }\n\n  render() {\n    return (\n      <div className='TileForm'>\n        <div className='form row'>\n          <TextField\n            id=\"tile-label\"\n            label=\"Label\"\n            className={'text-field'}\n            defaultValue={this.state.tile_label}\n            onChange={this.handleChange('tile_label')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <TextField\n            id=\"tile-character\"\n            label=\"Character\"\n            className={'text-field'}\n            defaultValue={this.state.tile_character}\n            onChange={this.handleChange('tile_character')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <TextField\n            id=\"tile-color\"\n            label=\"Hex Color\"\n            className={'text-field'}\n            defaultValue={this.state.tile_color}\n            onChange={this.handleChange('tile_color')}\n            margin=\"normal\"\n            variant=\"outlined\"\n            InputProps={{\n              startAdornment: <InputAdornment position=\"start\">#</InputAdornment>,\n            }}\n          />\n          <TextField\n            id=\"tile-data\"\n            label=\"Data\"\n            placeholder='{\n              type: tree\n            }'\n            multiline\n            defaultValue={this.state.tile_data}\n            onChange={this.handleChange('tile_data')}\n            className={'text-field'}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <Button \n            variant=\"outlined\" \n            color=\"primary\" \n            className='btn-full-width'\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n            </i>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TileForm;","import React, { Component } from \"react\";\nimport TileForm from './TileForm';\nimport Button from '@material-ui/core/Button';\n\nconst TilePlate = ({id, label, color, character, data, handleSwapSelectedTile, handleRemoveTile}) => (\n  <div className='TilePlate'>\n    <Button \n      variant=\"contained\" \n      color=\"primary\"\n      onClick={() => {\n        handleSwapSelectedTile({character, color, data})\n      }}\n    >\n      {label}\n    </Button>\n    <Button \n      color=\"secondary\" \n      aria-label=\"remove tile\"\n      onClick={() => {handleRemoveTile(id)}}\n    >\n      <i className=\"material-icons\">\n        delete\n      </i>\n    </Button>\n  </div>\n)\n\nclass TilePalette extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tiles: [\n        {\n          id: 1,\n          label: 'land',\n          color: '#298',\n          character: 'L',\n          data: {type: 'province', owner: 'Oda'}\n        },\n        {\n          id: 2,\n          label: 'water',\n          color: '#ace',\n          character: '~',\n          data: {type: 'natural', owner: 'none'}\n        },\n        {\n          id: 3,\n          label: 'mountain',\n          color: '#bbb',\n          character: 'M',\n          data: {type: 'natural', owner: 'none'}\n        },\n        {\n          id: 4,\n          label: 'army',\n          color: '#f44',\n          character: '@',\n          data: {type: 'troop', owner: 'Oda'}\n        },\n      ],\n      form_is_visible: false,\n    };\n  }\n\n  drawTilePlates () {\n    return this.state.tiles.map((tile, index) => {\n      return (\n        <TilePlate \n          key={index}\n          id={tile.id}\n          label={tile.label}\n          color={tile.color}\n          character={tile.character}\n          data={{...tile.data}}\n          handleSwapSelectedTile={this.props.handleSwapSelectedTile}\n          handleRemoveTile={this.handleRemoveTile.bind(this)}\n        />\n      )\n    })\n  }\n\n  handleToggleForm () {\n    this.setState({form_is_visible: !this.state.form_is_visible})\n  }\n\n  handleAddTile (new_tile) {\n    let tiles = [...this.state.tiles];\n    let next_id = tiles.length > 0 ? tiles[tiles.length - 1].id + 1 : 1;\n    let tile_id = {id: next_id};\n    tiles.push({...tile_id, ...new_tile});\n    this.setState({\n      tiles,\n      form_is_visible: false,\n    })\n  }\n\n  handleRemoveTile (id) {\n    let tiles = this.state.tiles.filter((tile) => tile.id !== id);\n    this.setState({tiles});\n  }\n\n  render() {\n    return (\n      <div className=\"TilePalette tool-pane\">\n        <h4>Palette</h4>\n        {this.drawTilePlates()}\n        <br />\n        <Button \n          variant=\"outlined\" \n          color=\"default\" \n          className='btn-full-width'\n          onClick={this.handleToggleForm.bind(this)}\n        >\n          {\n            (this.state.form_is_visible)\n            ? (\n                <i className=\"material-icons\">\n                  close\n                </i>\n            )\n            : (\n                <i className=\"material-icons\">\n                  add\n                </i>\n            )\n          }\n        </Button>\n        {\n          this.state.form_is_visible && <TileForm handleAddTile={this.handleAddTile.bind(this)}/>\n        }\n      </div>\n    );\n  }\n}\n\nexport default TilePalette;","import React, { Component } from \"react\";\n\nclass RegionViewer extends Component {\n  render() {\n    return (\n      <div className=\"RegionViewer tool-pane\">\n        <h4>Regions</h4>\n      </div>\n    );\n  }\n}\n\nexport default RegionViewer;","import React, { Component } from \"react\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport TilePalette from './TilePalette';\nimport RegionViewer from './RegionViewer';\n\nclass ToolPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0,\n    };\n  }\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  render() {\n    return (\n      <div className=\"ToolPanel\">\n        <AppBar className='tool-tabs' position=\"static\">\n          <Tabs variant=\"fullWidth\" value={this.state.value} onChange={this.handleChange}>\n            <Tab label=\"Palette\" />\n            <Tab label=\"Regions\" />\n          </Tabs>\n        </AppBar>\n        {/* {this.state.value === 0 && <TilePalette handleSwapSelectedTile={this.props.handleSwapSelectedTile}/>}\n        {this.state.value === 1 && <RegionViewer />} */}\n        <span className={this.state.value === 0 ? '' : 'hidden'}>\n          <TilePalette handleSwapSelectedTile={this.props.handleSwapSelectedTile}/>\n        </span>\n        <span className={this.state.value === 1 ? '' : 'hidden'}>\n          <RegionViewer />\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default ToolPanel;","import React, { Component } from \"react\";\nimport Button from '@material-ui/core/Button';\n\nexport class Toolbar extends Component {\n  render() {\n    return (\n      <div className='Toolbar'>\n        <Button \n          className='btn-tool' \n          onClick={() => {this.props.onToolSwitch('pencil')}} \n          variant={this.props.tool_in_use === 'pencil' ? 'contained' : 'outlined'}\n          color=\"secondary\"\n        >\n          <i className=\"material-icons\">\n            edit\n          </i>\n        </Button>\n        <Button \n          className='btn-tool' \n          onClick={() => { this.props.onToolSwitch('eraser')}}  \n          variant={this.props.tool_in_use === 'eraser' ? 'contained' : 'outlined'} \n          color=\"secondary\"\n        >\n          <i className=\"material-icons\">\n            indeterminate_check_box\n          </i>\n        </Button>\n        <Button \n          className='btn-tool' \n          onClick={() => { this.props.onToolSwitch('filler')}}  \n          variant={this.props.tool_in_use === 'filler' ? 'contained' : 'outlined'} \n          color=\"secondary\"\n        >\n          <i className=\"material-icons\">\n            format_color_fill\n          </i>\n        </Button>\n        <Button \n          className='btn-tool' \n          onClick={() => { this.props.onToolSwitch('box_paint')}} \n          variant={this.props.tool_in_use === 'box_paint' ? 'contained' : 'outlined'} \n          color=\"secondary\"\n          disabled\n        >\n          <i className=\"material-icons\">\n            select_all\n          </i>\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default Toolbar","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, HashRouter } from 'react-router-dom';\nimport { AnimatedSwitch } from 'react-router-transition';\nimport './App.scss';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport JsonView from './Components/JsonView';\nimport TileMap from './Components/TileMap';\nimport ToolPanel from './Components/ToolPanel';\nimport GridToolbar from './Components/Toolbar';\nimport Grid from '@material-ui/core/Grid';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    const cols = 30;\n    const rows = 30;\n    const tile_size = 32;\n    const tile_gutter = 8;\n    const empty_tile = { type: 0, character: '', color: 'white' };\n\n    this.state = {\n      cols,\n      rows,\n      tile_size,\n      tile_gutter,\n      empty_tile,\n      tiles: new Array(cols * rows).fill({...empty_tile}),\n      selected_tile: {\n        character: '#',\n        color: '#fff',\n        data: null,\n      },\n      tool_in_use: 'pencil',\n    }\n  }\n\n  handleToolSwitch (tool_in_use) {\n    this.setState({tool_in_use});\n  }\n\n  handleSwapSelectedTile (selected_tile_properties) {\n    let tool_in_use = this.state.tool_in_use === 'eraser' ? 'pencil' : this.state.tool_in_use\n    this.setState({selected_tile: selected_tile_properties, tool_in_use});\n  }\n\n  handleUpdateTiles (tiles) {\n    this.setState({tiles})\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"App\">\n          <AppBar className=\"NavBar\" position=\"static\">\n            <Toolbar>\n              <h5 className=\"nav-title\" onClick={() => { window.location = '#/' }}>ASCII Map Maker</h5>\n              <GridToolbar \n                onToolSwitch={this.handleToolSwitch.bind(this)}\n                selected_tile={this.state.selected_tile}\n                tool_in_use={this.state.tool_in_use}\n              />\n              <div className='nav-buttons-right'>\n                <Button color=\"inherit\" onClick={() => {window.location = '#/export'}}>Export</Button>\n              </div>\n            </Toolbar>\n          </AppBar>\n          <AnimatedSwitch\n            atEnter={{ opacity: 0 }}\n            atLeave={{ opacity: 0 }}\n            atActive={{ opacity: 1 }}\n            className=\"fade\"\n          >\n            <Route exact path={'/'} render={(props) => (\n              <Grid container >\n                <Grid item xs={12} sm={8}>\n                  <TileMap\n                    cols={this.state.cols}\n                    rows={this.state.rows}\n                    tiles={this.state.tiles}\n                    tile_size={32}\n                    tile_gutter={8}\n                    selected_tile={{ ...this.state.selected_tile }}\n                    onUpdateTiles={this.handleUpdateTiles.bind(this)}\n                    tool_in_use={this.state.tool_in_use}\n                    empty_tile={this.state.empty_tile}\n                  />\n                </ Grid>\n                <Grid item xs={12} sm={4}>\n                  <ToolPanel handleSwapSelectedTile={this.handleSwapSelectedTile.bind(this)} />\n                </ Grid>\n              </ Grid>\n            )} />\n            <Route path={'/export'} render={\n              (props) => (\n                <JsonView \n                  cols={this.state.cols}\n                  rows={this.state.rows}\n                  tiles={this.state.tiles} \n                />\n              )} \n            />\n          </AnimatedSwitch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}