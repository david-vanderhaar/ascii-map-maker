{"version":3,"sources":["Components/JsonView.js","Components/Tiles.js","Components/TileMap.js","Components/TileForm.js","Components/TilePreview.js","Components/TilePalette.js","Components/LayerForm.js","Components/Layers.js","Components/RegionViewer.js","Components/Settings.js","Components/ToolPanel.js","Components/Toolbar.js","Components/SaveList.js","App.js","serviceWorker.js","index.js"],"names":["JsonView","_ref","cols","rows","tiles","react_default","a","createElement","className","Grid_default","container","spacing","item","xs","sm","Button_default","color","variant","aria-label","onClick","document","getElementById","select","execCommand","TextField_default","id","label","multiline","fullWidth","rowsMax","value","JSON","stringify","margin","TextTile","Component","_Component2","props","_this2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","onUpdateTile","x","y","handleMouseOver","mouse_down","setState","is_hovering","handleMouseOut","state","character","fill","hover_fill","viewing_offset","viewing_size_increase","inherits","createClass","key","is_viewing","ReactKonva","text","fontSize","align","verticalAlign","width","tile_size","height","onMouseOver","onMouseOut","TileMap","_this","col","row","Array","map","empty","c","r","tile","getTile","Tiles_TextTile","concat","handleUpdateTile","bind","prev_tile","new_tile","current_tile","parse","floodFillUtil","tool_in_use","type","selected_tile","data","objectSpread","empty_tile","floodFill","onUpdateTiles","onMouseDown","handleMouseDown","onMouseUp","handleMouseUp","drawTiles","TileForm","handleChange","name","event","defineProperty","target","tile_to_edit","editing_tile_id","filter","tile_label","tile_character","tile_color","tile_data","hex","e","handleEditTile","handleAddTile","defaultValue","onChange","lib","onChangeComplete","handleColorChange","placeholder","onSubmit","TilePreview","style","TilePlate","handleSwapSelectedTile","handleCloseForm","handleRemoveTile","handleToggleEdit","TilePalette","owner","form_is_visible","index","TilePalette_TilePlate","_this3","toConsumableArray","tile_id","length","drawTilePlates","Components_TilePreview","handleToggleForm","Components_TileForm","LayerForm","layer_name","new_layer","handleAddLayer","LayerPlate","layer","is_editing","handleEditLayer","toggleEdit","handleSwapLayer","deletable","handleRemoveLayer","Layers","layers","current_layer","Layers_LayerPlate","Components_LayerForm","RegionViewer","Settings","handleGridChange","new_size","parseInt","grid_min","grid_max","push","onUpdateGridSize","Grow_default","in","ToolPanel","AppBar_default","position","Tabs_default","Tab_default","Components_TilePalette","Components_Layers","Components_RegionViewer","Components_Settings","Toolbar","_Component","can_hotkey","Tooltip_default","title","onToolSwitch","disabled","onUndo","tile_history_index","tile_history","onRedo","SaveList","saves","onDeleteSave","onLoadSave","save","timestamp","toString","App","localStorage","getItem","local_storage_key","show_saves","default_cols","default_rows","tile_gutter","tile_history_max","selected_tile_properties","slice","next_id","local_saves","new_save","Date","setItem","error","alert","new_state","handleToggleSaves","remaining_saves","HashRouter","Toolbar_default","window","location","Components_Toolbar","handleToolSwitch","handleUndo","handleRedo","handleSaveStateToLocalStorage","Components_SaveList","handleLoadStateFromLocalStorage","handleDeleteStateFromLocalStorage","es","atEnter","opacity","atLeave","atActive","Route","exact","path","render","Components_TileMap","handleUpdateTiles","Components_ToolPanel","handleUpdateGridSize","Components_JsonView","Boolean","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0770f07.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\n\n\nconst JsonView = ({ cols, rows, tiles }) => (\n  <div className='JsonView'>\n    <Grid container spacing={24}>\n      <Grid item xs={12} sm={4}>\n        <Button\n          color=\"primary\"\n          variant='contained'\n          aria-label=\"copy\"\n          onClick={() => { \n            document.getElementById('json-export-data').select();\n            document.execCommand(\"copy\");\n          }}\n        >\n          Copy to Clipboard \n        </Button>\n      </Grid>\n      <Grid item xs={12} sm={8}>\n        <TextField\n          id=\"json-export-data\"\n          label=\"Json\"\n          multiline\n          fullWidth\n          rowsMax=\"8\"\n          value={JSON.stringify({\n            cols, rows, tiles\n          })}\n          margin=\"normal\"\n          variant=\"outlined\"\n        />\n      </Grid>\n    </Grid>\n  </div>\n);\n\nexport default JsonView;","import React, { Component } from \"react\";\nimport Konva from \"konva\";\nimport { Rect, Text } from \"react-konva\";\n\nexport class ColoredRect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: \"black\"\n    };\n  }\n\n  handleClick = () => {\n    this.setState({\n      color: Konva.Util.getRandomColor()\n    });\n  };\n\n  render() {\n    return (\n      <Rect\n        x={this.props.x}\n        y={this.props.y}\n        width={this.props.tile_size - this.props.tile_gutter}\n        height={this.props.tile_size - this.props.tile_gutter}\n        onClick={this.handleClick}\n      />\n    );\n  }\n}\n\nexport class TextTile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      character: props.character,\n      fill: props.color,\n      hover_fill: 'red',\n      is_hovering: false,\n      viewing_offset: -16,\n      viewing_size_increase: 8,\n    };\n  }\n\n  handleClick = () => {\n    this.props.onUpdateTile(this.props.x, this.props.y)\n  };\n\n  handleMouseOver = () => {\n    let new_state = {\n      is_hovering: true,\n    }\n    if (this.props.mouse_down) {\n      this.props.onUpdateTile(this.props.x, this.props.y)\n    }\n    this.setState(new_state);\n  };\n\n  handleMouseOut = () => {\n    this.setState({\n      is_hovering: false,\n    });\n  };\n\n  render() {\n    const viewing_offset = this.props.is_viewing * this.state.viewing_offset;\n    const viewing_size_increase = this.props.is_viewing * this.state.viewing_size_increase;\n\n    return (\n      <Text\n        text={this.props.character}\n        fill={this.state.is_hovering ? this.state.hover_fill: this.props.color}\n        x={this.props.x + viewing_offset}\n        y={this.props.y + viewing_offset}\n        fontSize={16 + viewing_size_increase}\n        align='center'\n        verticalAlign='middle'\n        width={this.props.tile_size}\n        height={this.props.tile_size}\n        onClick={this.handleClick}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n      />\n    );\n  }\n}","import React, { Component } from \"react\";\nimport { Stage, Layer } from \"react-konva\";\nimport * as Tiles from './Tiles.js';\n\nclass TileMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mouse_down: false,\n    };\n  }\n\n  getTile (col, row) {\n    return this.props.tiles[row * this.props.cols + col]\n  }\n\n  drawTiles () {\n    let tiles = new Array(this.props.cols).fill(null).map((empty, c) => {\n      return new Array(this.props.rows).fill(null).map((empty, r) => {\n        let tile = this.getTile(c, r);\n        const is_viewing = false;\n        // const is_viewing = tile.character === '#';\n        return (\n          <Tiles.TextTile\n            key={`${c}-${r}`}\n            is_viewing={is_viewing}\n            x={c * this.props.tile_size}\n            y={r * this.props.tile_size}\n            character={tile.character}\n            color={tile.color}\n            tile_size={this.props.tile_size}\n            mouse_down={this.state.mouse_down}\n            onUpdateTile={this.handleUpdateTile.bind(this)}\n          />\n        )\n      })\n    })\n    return tiles;\n  }\n\n  floodFillUtil (cols, rows, tiles, x, y, prev_tile, new_tile)\n  {\n    let current_tile = tiles[y * cols + x];\n    // Base cases \n    if (x < 0 || x >= cols || y < 0 || y >= rows) { return tiles; }\n    if (JSON.stringify(current_tile) !== JSON.stringify(prev_tile)) { return tiles; }\n    \n    // Replace the color at (x, y) \n    tiles[y * cols + x] = JSON.parse(JSON.stringify(new_tile));\n    \n    // Recur for north, east, south and west \n    this.floodFillUtil(cols, rows, tiles, x + 1, y, prev_tile, new_tile);\n    this.floodFillUtil(cols, rows, tiles, x - 1, y, prev_tile, new_tile);\n    this.floodFillUtil(cols, rows, tiles, x, y + 1, prev_tile, new_tile);\n    this.floodFillUtil(cols, rows, tiles, x, y - 1, prev_tile, new_tile);\n\n    return tiles;\n  }\n\n  // It mainly finds the previous color on (x, y) and \n  floodFill (cols, rows, tiles, x, y, new_tile)\n  {\n    let prev_tile = tiles[y * cols + x]\n    return this.floodFillUtil(cols, rows, tiles, x, y, prev_tile, new_tile);\n  } \n\n  handleUpdateTile (x, y) {\n    const col = x / this.props.tile_size;\n    const row = y / this.props.tile_size;\n    let tiles = JSON.parse(JSON.stringify(this.props.tiles)); // cheap deep clone\n\n    switch (this.props.tool_in_use) {\n      case 'pencil':\n        tiles[row * this.props.cols + col] = ({\n          type: 1,\n          character: this.props.selected_tile.character,\n          color: this.props.selected_tile.color,\n          data: JSON.stringify(this.props.selected_tile.data),\n        });\n        break;\n      case 'eraser':\n        tiles[row * this.props.cols + col] = ({ ...this.props.empty_tile })\n        break;\n      case 'filler':\n        if (JSON.stringify(tiles[row * this.props.cols + col]) !== JSON.stringify(this.props.selected_tile)) {\n          tiles = this.floodFill(this.props.cols, this.props.rows, tiles, col, row, this.props.selected_tile)\n        }\n        break;\n      default:\n        tiles[row * this.props.cols + col] = ({\n          type: 1,\n          character: this.props.selected_tile.character,\n          color: this.props.selected_tile.color,\n        });\n    }\n    this.props.onUpdateTiles(tiles)\n  }\n\n  handleMouseDown () {\n    this.setState({mouse_down: true})\n  }\n\n  handleMouseUp () {\n    this.setState({mouse_down: false})\n  }\n\n  render() {\n    return (\n      <div className='TileMap'>\n        <Stage \n          width={this.props.cols * this.props.tile_size} \n          height={this.props.rows * this.props.tile_size}\n          onMouseDown={this.handleMouseDown.bind(this)} \n          onMouseUp={this.handleMouseUp.bind(this)}\n        >\n          <Layer>\n            {\n              this.drawTiles().map((tile) => {\n                return tile;\n              })\n            }\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n}\n\nexport default TileMap;\n","import React, { Component } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { SketchPicker } from 'react-color';\n\nclass TileForm extends Component {\n  constructor(props) {\n    super(props);\n    let tile_to_edit = this.props.editing_tile_id ? this.props.tiles.filter((tile) => tile.id === this.props.editing_tile_id)[0] : null\n    let tile_label = tile_to_edit ? tile_to_edit.label : '';\n    let tile_character = tile_to_edit ? tile_to_edit.character : '';\n    let tile_color = tile_to_edit ? tile_to_edit.color : '#fff';\n    let tile_data = tile_to_edit ? JSON.stringify(tile_to_edit.data) : '';\n    \n    this.state = {\n      tile_label,\n      tile_character,\n      tile_color,\n      tile_data,\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  handleColorChange (color, event) {\n    this.setState({tile_color: color.hex})\n  }\n\n  onSubmit () {\n    let new_tile = {\n      label: this.state.tile_label,\n      character: this.state.tile_character,\n      color: this.state.tile_color,\n    }\n\n    try {\n      new_tile.data = JSON.parse(this.state.tile_data);\n    } catch(e) {\n      new_tile.data = this.state.tile_data;\n    }\n    \n    if (this.props.editing_tile_id) {\n      this.props.handleEditTile(new_tile, this.props.editing_tile_id)\n    } else {\n      this.props.handleAddTile(new_tile);\n    }\n  }\n\n  render() {\n    return (\n      <div className='TileForm'>\n        <div className='form row'>\n          <TextField\n            id=\"tile-label\"\n            label=\"Label\"\n            className={'text-field'}\n            defaultValue={this.state.tile_label}\n            onChange={this.handleChange('tile_label')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <TextField\n            id=\"tile-character\"\n            label=\"Character\"\n            className={'text-field'}\n            defaultValue={this.state.tile_character}\n            onChange={this.handleChange('tile_character')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <div className='form-label'>Color</div>\n          <SketchPicker \n            width='initial'\n            color={this.state.tile_color}\n            onChangeComplete={this.handleColorChange.bind(this)}\n          />\n          <br />\n          <TextField\n            id=\"tile-data\"\n            label=\"Data\"\n            placeholder='{\n              type: tree\n            }'\n            multiline\n            defaultValue={this.state.tile_data}\n            onChange={this.handleChange('tile_data')}\n            className={'text-field'}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <Button \n            variant=\"outlined\" \n            color=\"primary\" \n            className='btn-full-width'\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n            </i>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TileForm;","import React from \"react\";\n\nconst TilePreview = ({ character, color}) => (\n  <div className='TilePreview'>\n    <span style={{color}}>\n      {character}\n    </span>\n  </div>\n);\n\nexport default TilePreview;","import React, { Component } from \"react\";\nimport TileForm from './TileForm';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TilePreview from './TilePreview';\n\nconst TilePlate = ({ id, label, color, character, data, handleSwapSelectedTile, handleCloseForm, handleRemoveTile, handleToggleEdit}) => (\n  <div className='TilePlate'>\n    <Button \n      variant=\"contained\" \n      color=\"primary\"\n      onClick={() => {\n        handleSwapSelectedTile({character, color, data})\n        handleCloseForm();\n      }}\n    >\n      {label}\n    </Button>\n    <span className=\"actions\">\n      <Button \n        color=\"secondary\" \n        aria-label=\"remove tile\"\n        onClick={() => {handleRemoveTile(id)}}\n      >\n        <i className=\"material-icons\">\n          delete\n        </i>\n      </Button>\n      <Button \n        color=\"secondary\" \n        aria-label=\"edit tile\"\n        onClick={() => {handleToggleEdit(id)}}\n      >\n        <i className=\"material-icons\">\n          edit\n        </i>\n      </Button>\n    </span>\n  </div>\n)\n\nclass TilePalette extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tiles: [\n        {\n          id: 1,\n          label: 'land',\n          color: '#298',\n          character: 'L',\n          data: {type: 'province', owner: 'Oda'}\n        },\n        {\n          id: 2,\n          label: 'water',\n          color: '#ace',\n          character: '~',\n          data: {type: 'natural', owner: 'none'}\n        },\n        {\n          id: 3,\n          label: 'mountain',\n          color: '#bbb',\n          character: 'M',\n          data: {type: 'natural', owner: 'none'}\n        },\n        {\n          id: 4,\n          label: 'army',\n          color: '#f44',\n          character: '@',\n          data: {type: 'troop', owner: 'Oda'}\n        },\n      ],\n      form_is_visible: false,\n      editing_tile_id: null,\n    };\n  }\n\n  drawTilePlates () {\n    return this.state.tiles.map((tile, index) => {\n      return (\n        <TilePlate \n          key={index}\n          id={tile.id}\n          label={tile.label}\n          color={tile.color}\n          character={tile.character}\n          data={{...tile.data}}\n          handleSwapSelectedTile={this.props.handleSwapSelectedTile}\n          handleCloseForm={this.handleCloseForm.bind(this)}\n          handleRemoveTile={this.handleRemoveTile.bind(this)}\n          handleToggleEdit={this.handleToggleEdit.bind(this)}\n        />\n      )\n    })\n  }\n\n  handleToggleForm () {\n    this.setState({form_is_visible: !this.state.form_is_visible})\n  }\n\n  handleCloseForm () {\n    this.setState({ form_is_visible: false, editing_tile_id: null})\n  }\n\n  handleToggleEdit (editing_tile_id) {\n    this.setState({ editing_tile_id, form_is_visible: false,}, () => {this.setState({form_is_visible: true})})\n  }\n\n  handleAddTile (new_tile) {\n    let tiles = [...this.state.tiles];\n    let next_id = tiles.length > 0 ? tiles[tiles.length - 1].id + 1 : 1;\n    let tile_id = {id: next_id};\n    this.setState({\n      tiles: tiles.concat({ ...tile_id, ...new_tile }),\n      form_is_visible: false,\n    })\n    this.props.handleSwapSelectedTile(new_tile)\n  }\n  \n  handleEditTile (new_tile, id) {\n    let tiles = [...this.state.tiles].map((tile) => {\n      if (tile.id === id) {\n        new_tile.id = id;\n        return {...id, ...new_tile}\n      } else {\n        return tile\n      }\n    });\n    this.setState({\n      tiles,\n      form_is_visible: false,\n      editing_tile_id: null,\n    })\n    this.props.handleSwapSelectedTile(new_tile)\n  }\n\n  handleRemoveTile (id) {\n    let tiles = this.state.tiles.filter((tile) => tile.id !== id);\n    this.setState({\n      tiles,\n      form_is_visible: false,\n      editing_tile_id: null,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"TilePalette tool-pane\">\n        <Grid container spacing={24}>\n          <Grid item xs={12} sm={8}>\n            <h5>Palette</h5>\n            {this.drawTilePlates()}\n          </Grid>\n          <Grid item xs={12} sm={4}>\n            <h5>Current Tile</h5>\n            <TilePreview character={this.props.selected_tile.character} color={this.props.selected_tile.color} />\n          </Grid>\n        </Grid>\n        <br />\n        <Button \n          variant=\"outlined\" \n          color=\"default\" \n          className='btn-full-width'\n          onClick={this.handleToggleForm.bind(this)}\n        >\n          {\n            (this.state.form_is_visible)\n            ? (\n                <i className=\"material-icons\">\n                  close\n                </i>\n            )\n            : (\n                <i className=\"material-icons\">\n                  add\n                </i>\n            )\n          }\n        </Button>\n        {\n          this.state.form_is_visible && \n          (\n            <TileForm \n              tiles={this.state.tiles}\n              editing_tile_id={this.state.editing_tile_id}\n              handleEditTile={this.handleEditTile.bind(this)}\n              handleAddTile={this.handleAddTile.bind(this)}\n            />\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default TilePalette;","import React, { Component } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nclass LayerForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      layer_name: '',\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n\n  onSubmit () {\n    let new_layer = {\n      name: this.state.layer_name,\n    }\n    this.setState({layer_name: ''})\n    this.props.handleAddLayer(new_layer);\n  }\n\n  render() {\n    return (\n      <div className='LayerForm'>\n        <div className='form row'>\n          <TextField\n            id=\"layer-name\"\n            label=\"Name\"\n            className={'text-field'}\n            value={this.state.layer_name}\n            onChange={this.handleChange('layer_name')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <Button \n            variant=\"outlined\" \n            color=\"primary\" \n            className='btn-full-width'\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n            </i>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LayerForm;","import React, { Component } from \"react\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport LayerForm from './LayerForm';\n\nclass LayerPlate extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      layer_name: props.layer.name,\n      is_editing: false,\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  toggleEdit (value) {\n    this.setState({is_editing: value})\n  }\n\n  onSubmit() {\n    this.setState({ layer_name: '', is_editing: false })\n    this.props.handleEditLayer(this.props.layer.id, this.state.layer_name)\n  }\n\n  render () {\n    if (this.state.is_editing) {\n      return (\n        <div className='layer-edit-form'>\n          <TextField\n            id=\"layer-name\"\n            label=\"Name\"\n            className={'text-field'}\n            value={this.state.layer_name}\n            onChange={this.handleChange('layer_name')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n                </i>\n          </Button>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={() => {this.toggleEdit(false)}}\n          >\n            <i className=\"material-icons\">\n              close\n            </i>\n          </Button>\n        </div>\n      )\n    }\n    return (\n      <div className='LayerPlate'>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            this.props.handleSwapLayer(this.props.layer.id)\n          }}\n        >\n          {this.props.layer.name}\n        </Button>\n        {\n          this.props.layer.deletable && (\n            <span className=\"actions\">\n              <Button\n                color=\"secondary\"\n                aria-label=\"remove layer\"\n                onClick={() => { this.props.handleRemoveLayer(this.props.layer.id) }}\n              >\n                <i className=\"material-icons\">\n                  delete\n                </i>\n              </Button>\n              <Button\n                color=\"secondary\"\n                aria-label=\"edit layer\"\n                onClick={() => {this.toggleEdit(true)}}\n              >\n                <i className=\"material-icons\">\n                  edit\n                </i>\n              </Button>\n            </span>\n          )\n        }\n      </div>\n    )\n  }\n}\n\nclass Layers extends Component {\n\n  render() {\n    return (\n      <div className=\"Layers tool-pane\">\n        <h4>Layers</h4>\n        {this.props.layers.map((layer, index) => {\n          return (\n            <div key={index} className={index === this.props.current_layer ? 'layer-selected' : ''}>\n              <LayerPlate \n                layer={layer}\n                handleSwapLayer={this.props.handleSwapLayer}\n                handleRemoveLayer={this.props.handleRemoveLayer}\n                handleEditLayer={this.props.handleEditLayer}\n              />\n            </div>\n          )\n        })}\n        <hr/>\n        <LayerForm handleAddLayer={this.props.handleAddLayer}/>\n      </div>\n    );\n  }\n}\n\nexport default Layers;","import React, { Component } from \"react\";\n\nclass RegionViewer extends Component {\n  render() {\n    return (\n      <div className=\"RegionViewer tool-pane\">\n        <h4>Regions</h4>\n      </div>\n    );\n  }\n}\n\nexport default RegionViewer;","import React, { Component } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grow from '@material-ui/core/Grow';\n\nclass Settings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cols: props.cols,\n      rows: props.rows,\n      grid_min: 1,\n      grid_max: 50,\n    }\n  }\n\n  handleGridChange = name => event => {\n    let new_size = parseInt(event.target.value) ? parseInt(event.target.value) : this.state.grid_min;\n    this.setState({\n      [name]: new_size,\n    }, () => {\n      if (new_size < this.state.grid_min) {\n        this.setState({[name]: this.state.grid_min})\n      } else if (new_size > this.state.grid_max) {\n        this.setState({[name]: this.state.grid_max})\n      }\n    });\n  };\n\n  onSubmit () {\n    let cols = this.state.cols\n    let rows = this.state.rows\n    if (cols !== this.props.cols || rows !== this.props.rows) {\n      let tiles = [];\n      new Array(cols).fill(this.props.empty_tile).map((empty, r) => {\n        return new Array(rows).fill(this.props.empty_tile).map((empty, c) => {\n          tiles.push(JSON.parse(JSON.stringify(this.props.empty_tile)))\n        })\n      })\n      this.props.onUpdateGridSize(cols, rows, tiles);\n    }\n  }\n\n  render() {\n    return (\n      <div className='Settings tool-pane'>\n        <div className='form row'>\n          <div className='inline-group'>\n            <TextField\n              id=\"cols\"\n              label=\"cols\"\n              className={'text-field grid-field'}\n              value={this.state.cols}\n              onChange={this.handleGridChange('cols')}\n              margin=\"normal\"\n              variant=\"outlined\"\n              type=\"number\"\n            />\n            <TextField\n              id=\"rows\"\n              label=\"Rows\"\n              className={'text-field grid-field'}\n              value={this.state.rows}\n              onChange={this.handleGridChange('rows')}\n              margin=\"normal\"\n              variant=\"outlined\"\n              type=\"number\"\n            />\n          </div>\n          {\n            (this.props.cols !== this.state.cols || this.props.rows !== this.state.rows)\n            ? (\n              <Grow in={this.props.cols !== this.state.cols || this.props.rows !== this.state.rows}>\n                <p className=\"red-text\">\n                  WARNING\n                  This action will clear the current grid of all tiles\n                </p>\n              </Grow>\n            )\n            : (\n              null\n            )\n          }\n          <Button \n            variant=\"outlined\" \n            color=\"primary\" \n            className='btn-full-width'\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n            </i>\n          </Button>\n          <br />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Settings;","import React, { Component } from \"react\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport TilePalette from './TilePalette';\nimport Layers from './Layers';\nimport RegionViewer from './RegionViewer';\nimport Settings from \"./Settings\";\n\nclass ToolPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0,\n    };\n  }\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  render() {\n    return (\n      <div className=\"ToolPanel\">\n        <AppBar className='tool-tabs' position=\"static\">\n          <Tabs variant=\"fullWidth\" value={this.state.value} onChange={this.handleChange}>\n            <Tab label=\"Palette\" />\n            <Tab label=\"Layers\" />\n            <Tab label=\"Regions\" />\n            <Tab label=\"Settings\" />\n          </Tabs>\n        </AppBar>\n        {/* {this.state.value === 0 && <TilePalette handleSwapSelectedTile={this.props.handleSwapSelectedTile}/>}\n        {this.state.value === 1 && <RegionViewer />} */}\n        <span className={this.state.value === 0 ? '' : 'hidden'}>\n          <TilePalette \n            handleSwapSelectedTile={this.props.handleSwapSelectedTile}\n            selected_tile={this.props.selected_tile}\n          />\n        </span>\n        <span className={this.state.value === 1 ? '' : 'hidden'}>\n          <Layers \n            layers={this.props.layers}\n            current_layer={this.props.current_layer}\n            handleAddLayer={this.props.handleAddLayer}\n            handleSwapLayer={this.props.handleSwapLayer}\n            handleRemoveLayer={this.props.handleRemoveLayer}\n            handleEditLayer={this.props.handleEditLayer}\n          />\n        </span>\n        <span className={this.state.value === 2 ? '' : 'hidden'}>\n          <RegionViewer />\n        </span>\n        <span className={this.state.value === 3 ? '' : 'hidden'}>\n          <Settings\n            cols={this.props.cols} \n            rows={this.props.rows} \n            tiles={this.props.tiles} \n            empty_tile={this.props.empty_tile} \n            onUpdateGridSize={this.props.onUpdateGridSize}\n          />\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default ToolPanel;","import React, { Component } from \"react\";\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nexport class Toolbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      can_hotkey: false,\n    }\n  }\n\n  render() {\n    return (\n      <div className='Toolbar'>\n        <Tooltip title='pencil'>\n          <Button \n            className='btn-tool' \n            onClick={() => {this.props.onToolSwitch('pencil')}} \n            variant={this.props.tool_in_use === 'pencil' ? 'contained' : 'outlined'}\n            color=\"secondary\"\n          >\n            <i className=\"material-icons\">\n              edit\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='eraser'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onToolSwitch('eraser')}}  \n            variant={this.props.tool_in_use === 'eraser' ? 'contained' : 'outlined'} \n            color=\"secondary\"\n          >\n            <i className=\"material-icons\">\n              indeterminate_check_box\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='fill'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onToolSwitch('filler')}}  \n            variant={this.props.tool_in_use === 'filler' ? 'contained' : 'outlined'} \n            color=\"secondary\"\n          >\n            <i className=\"material-icons\">\n              format_color_fill\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='box paint'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onToolSwitch('box_paint')}} \n            variant={this.props.tool_in_use === 'box_paint' ? 'contained' : 'outlined'} \n            color=\"secondary\"\n            disabled\n          >\n            <i className=\"material-icons\">\n              select_all\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='undo'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onUndo()}}  \n            variant='contained'\n            color=\"secondary\"\n            disabled={this.props.tile_history_index >= this.props.tile_history.length - 1}\n          >\n            <i className=\"material-icons\">\n              undo\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='redo'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onRedo()}}  \n            variant='contained'\n            color=\"secondary\"\n            disabled={this.props.tile_history_index <= 0}\n          >\n            <i className=\"material-icons\">\n              redo\n            </i>\n          </Button>\n        </Tooltip>\n      </div>\n    );\n  }\n}\n\nexport default Toolbar","import React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nconst SaveList = ({ saves, onDeleteSave, onLoadSave }) => (\n  <div className='SaveList'>\n    <Grid container spacing={24}>\n      {\n        saves.map((save, index) => {\n          return (\n            <Grid key={index} item xs={12}>\n              <Button\n                color=\"primary\"\n                variant='contained'\n                aria-label=\"save\"\n                onClick={() => {\n                  onLoadSave(save.id);\n                }}\n              >\n                Load {save.timestamp.toString()}\n              </Button>\n              <Button\n                color=\"secondary\"\n                variant='contained'\n                aria-label=\"delete save\"\n                onClick={() => {\n                  onDeleteSave(save.id);\n                }}\n              >\n                <i className=\"material-icons\">\n                  delete\n                </i>\n              </Button>\n            </Grid>\n          )\n        })\n      }\n    </Grid>\n  </div>\n);\n\nexport default SaveList;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, HashRouter } from 'react-router-dom';\nimport { AnimatedSwitch } from 'react-router-transition';\nimport './App.scss';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport JsonView from './Components/JsonView';\nimport TileMap from './Components/TileMap';\nimport ToolPanel from './Components/ToolPanel';\nimport GridToolbar from './Components/Toolbar';\nimport SaveList from './Components/SaveList';\nimport Grid from '@material-ui/core/Grid';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    const cols = 36;\n    const rows = 20;\n    const tile_size = 32;\n    const tile_gutter = 8;\n    const empty_tile = { type: 0, character: '', color: 'white', data: null };\n    const tiles = new Array(cols * rows).fill({ ...empty_tile });\n    const local_storage_key = 'ascii_map_maker';\n    const saves = JSON.parse(localStorage.getItem(local_storage_key));\n\n    this.state = {\n      local_storage_key,\n      show_saves: false,\n      saves,\n      default_cols: cols,\n      default_rows: rows,\n      tile_size,\n      tile_gutter,\n      empty_tile,\n      tile_history_max: 10,\n      selected_tile: {\n        character: '#',\n        color: '#fff',\n        data: null,\n      },\n      tool_in_use: 'pencil',\n      layers: [\n        {\n          id: 1,\n          name: 'Base',\n          cols,\n          rows,\n          tiles,\n          tile_history: [JSON.stringify(tiles)],\n          tile_history_index: 0,\n          deletable: false,\n        },\n        {\n          id: 2,\n          name: 'Base 2',\n          cols,\n          rows,\n          tiles,\n          tile_history: [JSON.stringify(tiles)],\n          tile_history_index: 0,\n          deletable: true,\n        },\n      ],\n      current_layer: 0,\n    }\n  }\n\n  handleToolSwitch (tool_in_use) {\n    this.setState({tool_in_use});\n  }\n\n  handleUndo () {\n    let tile_history_index = this.state.layers[this.state.current_layer].tile_history_index + 1\n    let tiles = JSON.parse(this.state.layers[this.state.current_layer].tile_history[tile_history_index])\n    let layers = [...this.state.layers];\n    layers[this.state.current_layer].tiles = tiles;\n    layers[this.state.current_layer].tile_history_index = tile_history_index;\n    this.setState({\n      layers\n    })\n  }\n  \n  handleRedo () {\n    let tile_history_index = this.state.layers[this.state.current_layer].tile_history_index - 1\n    let tiles = JSON.parse(this.state.layers[this.state.current_layer].tile_history[tile_history_index])\n    let layers = [...this.state.layers];\n    layers[this.state.current_layer].tiles = tiles;\n    layers[this.state.current_layer].tile_history_index = tile_history_index;\n    this.setState({\n      layers\n    })\n  }\n\n  handleSwapSelectedTile (selected_tile_properties) {\n    let tool_in_use = this.state.tool_in_use === 'eraser' ? 'pencil' : this.state.tool_in_use\n    this.setState({selected_tile: selected_tile_properties, tool_in_use});\n  }\n\n  handleUpdateTiles (tiles) {\n    let tile_history = [JSON.stringify(tiles), ...this.state.layers[this.state.current_layer].tile_history].slice(this.state.layers[this.state.current_layer].tile_history_index, this.state.tile_history_max)\n    let layers = [...this.state.layers];\n    layers[this.state.current_layer].tile_history_index = 0;\n    layers[this.state.current_layer].tiles = tiles;\n    layers[this.state.current_layer].tile_history = tile_history;\n    \n    this.setState({\n      layers\n    })\n  }\n  \n  handleUpdateGridSize (cols, rows, tiles) {\n    let layers = [...this.state.layers];\n    layers[this.state.current_layer].cols = cols;\n    layers[this.state.current_layer].rows = rows;\n    layers[this.state.current_layer].tiles = tiles;\n\n    this.setState({\n      layers\n    })\n  }\n\n  handleAddLayer (new_layer) {\n    const tiles = new Array(this.state.default_cols * this.state.default_rows).fill({ ...this.state.empty_tile });\n    \n    let layers = [...this.state.layers];\n    let next_id = layers.length > 0 ? layers[layers.length - 1].id + 1 : 1;\n    new_layer.id = next_id;\n    new_layer.tiles = tiles;\n    new_layer.cols = this.state.default_cols;\n    new_layer.rows = this.state.default_rows;\n    new_layer.tile_history = [JSON.stringify(tiles)];\n    new_layer.tile_history_index = 0;\n    new_layer.deletable = true;\n\n    layers = layers.concat(new_layer);\n    this.setState({layers},\n      () => {\n        this.handleSwapLayer(next_id);\n      }\n    );\n  }\n\n  handleSwapLayer(id) {\n    this.setState({current_layer: id - 1})\n  }\n\n  handleRemoveLayer(id) {\n    let layers = [...this.state.layers].filter((layer) => layer.id !== id);\n    this.setState({layers, current_layer: 0});\n  }\n\n  handleEditLayer(id, name) {\n    let layers = [...this.state.layers].map((layer) => {\n      if (layer.id === id) {\n        layer.name = name;\n      }\n      return layer;\n    });\n    this.setState({layers});\n  }\n\n  handleToggleSaves (value) {\n    this.setState({\n      show_saves: value,\n    })\n  }\n\n  handleSaveStateToLocalStorage () {\n    let local_saves = JSON.parse(localStorage.getItem(this.state.local_storage_key));\n    let next_id  = 1;\n    if (local_saves) {\n      next_id = local_saves.length > 0 ? local_saves[local_saves.length - 1].id + 1 : 1;\n    }\n    let new_save = {\n      id: next_id,\n      timestamp: new Date(),\n      data: this.state,\n    }\n\n    let saves = local_saves !== null ? [...local_saves, new_save] : [new_save];\n\n    try {\n      localStorage.setItem(this.state.local_storage_key, JSON.stringify(saves));\n      this.setState({saves})\n    } catch(error) {\n      alert('Local storage is full');\n    }\n  }\n  \n  handleLoadStateFromLocalStorage (id) {\n    let save = this.state.saves.filter((save) => save.id === id);\n    if (save.length > 0) {\n      let new_state = {...save[0].data, saves: [...this.state.saves]}\n      this.setState(new_state);\n    }\n    this.handleToggleSaves(false);\n  }\n\n  handleDeleteStateFromLocalStorage (id) {\n    let local_saves = JSON.parse(localStorage.getItem(this.state.local_storage_key));\n    let remaining_saves = local_saves.filter((save) => save.id !== id);\n    localStorage.setItem(this.state.local_storage_key, JSON.stringify(remaining_saves));\n    this.setState({ saves: remaining_saves });\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"App\">\n          <AppBar className=\"NavBar\" position=\"static\">\n            <Toolbar>\n              <h5 className=\"nav-title\" onClick={() => { window.location = '#/' }}>ASCII Map Maker</h5>\n              <GridToolbar \n                onToolSwitch={this.handleToolSwitch.bind(this)}\n                onUndo={this.handleUndo.bind(this)}\n                onRedo={this.handleRedo.bind(this)}\n                tile_history={this.state.layers[this.state.current_layer].tile_history}\n                tile_history_index={this.state.layers[this.state.current_layer].tile_history_index}\n                selected_tile={this.state.selected_tile}\n                tool_in_use={this.state.tool_in_use}\n              />\n              <div className='nav-buttons-right'>\n                <Button \n                  variant='contained'\n                  color='secondary'\n                  onClick={this.handleSaveStateToLocalStorage.bind(this)}\n                >\n                  Save\n                </Button>\n                <Button \n                  variant='contained'\n                  color='secondary'\n                  disabled={!this.state.saves.length}\n                  onClick={() => {this.handleToggleSaves(!this.state.show_saves)}}\n                >\n                  Load\n                </Button>\n                <Button color=\"inherit\" onClick={() => {window.location = '#/export'}}>Export</Button>\n              </div>\n            </Toolbar>\n          </AppBar>\n          {\n            this.state.show_saves && (\n              <SaveList\n                saves={this.state.saves}\n                onLoadSave={this.handleLoadStateFromLocalStorage.bind(this)}\n                onDeleteSave={this.handleDeleteStateFromLocalStorage.bind(this)}\n              />\n            )\n          }\n          <AnimatedSwitch\n            atEnter={{ opacity: 0 }}\n            atLeave={{ opacity: 0 }}\n            atActive={{ opacity: 1 }}\n            className=\"fade\"\n          >\n            <Route exact path={'/'} render={(props) => (\n              <Grid container >\n                <Grid item xs={12} sm={8}>\n                  <TileMap\n                    cols={this.state.layers[this.state.current_layer].cols}\n                    rows={this.state.layers[this.state.current_layer].rows}\n                    tiles={this.state.layers[this.state.current_layer].tiles}\n                    tile_size={32}\n                    tile_gutter={8}\n                    selected_tile={{ ...this.state.selected_tile }}\n                    onUpdateTiles={this.handleUpdateTiles.bind(this)}\n                    tool_in_use={this.state.tool_in_use}\n                    empty_tile={this.state.empty_tile}\n                  />\n                </ Grid>\n                <Grid item xs={12} sm={4}>\n                  <ToolPanel \n                    layers={this.state.layers}\n                    current_layer={this.state.current_layer}\n                    cols={this.state.layers[this.state.current_layer].cols}\n                    rows={this.state.layers[this.state.current_layer].rows}\n                    tiles={this.state.layers[this.state.current_layer].tiles}\n                    empty_tile={this.state.empty_tile}\n                    selected_tile={this.state.selected_tile}\n                    handleSwapSelectedTile={this.handleSwapSelectedTile.bind(this)} \n                    handleAddLayer={this.handleAddLayer.bind(this)} \n                    handleSwapLayer={this.handleSwapLayer.bind(this)} \n                    handleRemoveLayer={this.handleRemoveLayer.bind(this)} \n                    handleEditLayer={this.handleEditLayer.bind(this)} \n                    onUpdateGridSize={this.handleUpdateGridSize.bind(this)} \n                  />\n                </ Grid>\n              </ Grid>\n            )} />\n            <Route path={'/export'} render={\n              (props) => (\n                <JsonView \n                  cols={this.state.layers[this.state.current_layer].cols}\n                  rows={this.state.layers[this.state.current_layer].rows}\n                  tiles={this.state.layers[this.state.current_layer].tiles} \n                />\n              )} \n            />\n          </AnimatedSwitch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}