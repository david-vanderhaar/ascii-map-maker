{"version":3,"sources":["Components/JsonView.js","Components/Tiles.js","Components/TileMap.js","Components/TileForm.js","Components/TilePreview.js","Components/TilePalette.js","Components/LayerForm.js","Components/Layers.js","Components/RegionViewer.js","Components/Settings.js","Components/ToolPanel.js","Components/Toolbar.js","App.js","serviceWorker.js","index.js"],"names":["JsonView","_ref","cols","rows","tiles","react_default","a","createElement","className","Grid_default","container","spacing","item","xs","sm","Button_default","color","variant","aria-label","onClick","document","getElementById","select","execCommand","TextField_default","id","label","multiline","fullWidth","rowsMax","value","JSON","stringify","margin","TextTile","Component","_Component2","props","_this2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","onUpdateTile","x","y","handleMouseOver","mouse_down","setState","is_hovering","handleMouseOut","state","character","fill","hover_fill","inherits","createClass","key","ReactKonva","text","fontSize","align","verticalAlign","width","tile_size","height","onMouseOver","onMouseOut","TileMap","_this","col","row","Array","map","empty","c","r","tile","getTile","Tiles_TextTile","concat","handleUpdateTile","bind","prev_tile","new_tile","current_tile","parse","floodFillUtil","tool_in_use","type","selected_tile","data","objectSpread","empty_tile","floodFill","onUpdateTiles","onMouseDown","handleMouseDown","onMouseUp","handleMouseUp","drawTiles","TileForm","handleChange","name","event","defineProperty","target","tile_to_edit","editing_tile_id","filter","tile_label","tile_character","tile_color","tile_data","hex","e","handleEditTile","handleAddTile","defaultValue","onChange","lib","onChangeComplete","handleColorChange","placeholder","onSubmit","TilePreview","style","TilePlate","handleSwapSelectedTile","handleCloseForm","handleRemoveTile","handleToggleEdit","TilePalette","owner","form_is_visible","index","TilePalette_TilePlate","_this3","toConsumableArray","tile_id","length","drawTilePlates","Components_TilePreview","handleToggleForm","Components_TileForm","LayerForm","layer_name","new_layer","handleAddLayer","LayerPlate","layer","is_editing","handleEditLayer","toggleEdit","handleSwapLayer","deletable","handleRemoveLayer","Layers","layers","current_layer","Layers_LayerPlate","Components_LayerForm","RegionViewer","Settings","handleGridChange","new_size","parseInt","grid_min","grid_max","push","onUpdateGridSize","Grow_default","in","ToolPanel","AppBar_default","position","Tabs_default","Tab_default","Components_TilePalette","Components_Layers","Components_RegionViewer","Components_Settings","Toolbar","_Component","can_hotkey","Tooltip_default","title","onToolSwitch","disabled","onUndo","tile_history_index","tile_history","onRedo","App","default_cols","default_rows","tile_gutter","tile_history_max","selected_tile_properties","slice","next_id","HashRouter","Toolbar_default","window","location","Components_Toolbar","handleToolSwitch","handleUndo","handleRedo","es","atEnter","opacity","atLeave","atActive","Route","exact","path","render","Components_TileMap","handleUpdateTiles","Components_ToolPanel","handleUpdateGridSize","Components_JsonView","Boolean","hostname","match","ReactDOM","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e41d065.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\n\n\nconst JsonView = ({ cols, rows, tiles }) => (\n  <div className='JsonView'>\n    <Grid container spacing={24}>\n      <Grid item xs={12} sm={4}>\n        <Button\n          color=\"primary\"\n          variant='contained'\n          aria-label=\"copy\"\n          onClick={() => { \n            document.getElementById('json-export-data').select();\n            document.execCommand(\"copy\");\n          }}\n        >\n          Copy to Clipboard \n        </Button>\n      </Grid>\n      <Grid item xs={12} sm={8}>\n        <TextField\n          id=\"json-export-data\"\n          label=\"Json\"\n          multiline\n          fullWidth\n          rowsMax=\"8\"\n          value={JSON.stringify({\n            cols, rows, tiles\n          })}\n          margin=\"normal\"\n          variant=\"outlined\"\n        />\n      </Grid>\n    </Grid>\n  </div>\n);\n\nexport default JsonView;","import React, { Component } from \"react\";\nimport Konva from \"konva\";\nimport { Rect, Text } from \"react-konva\";\n\nexport class ColoredRect extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: \"black\"\n    };\n  }\n\n  handleClick = () => {\n    this.setState({\n      color: Konva.Util.getRandomColor()\n    });\n  };\n\n  render() {\n    return (\n      <Rect\n        x={this.props.x}\n        y={this.props.y}\n        width={this.props.tile_size - this.props.tile_gutter}\n        height={this.props.tile_size - this.props.tile_gutter}\n        onClick={this.handleClick}\n      />\n    );\n  }\n}\n\nexport class TextTile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      character: props.character,\n      fill: props.color,\n      hover_fill: 'red',\n      is_hovering: false,\n    };\n  }\n\n  handleClick = () => {\n    this.props.onUpdateTile(this.props.x, this.props.y)\n  };\n\n  handleMouseOver = () => {\n    let new_state = {\n      is_hovering: true,\n    }\n    if (this.props.mouse_down) {\n      this.props.onUpdateTile(this.props.x, this.props.y)\n    }\n    this.setState(new_state);\n  };\n\n  handleMouseOut = () => {\n    this.setState({\n      is_hovering: false,\n    });\n  };\n\n  render() {\n    return (\n      <Text\n        text={this.props.character}\n        fill={this.state.is_hovering ? this.state.hover_fill: this.props.color}\n        x={this.props.x}\n        y={this.props.y}\n        fontSize={16}\n        align='center'\n        verticalAlign='middle'\n        width={this.props.tile_size}\n        height={this.props.tile_size}\n        onClick={this.handleClick}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n      />\n    );\n  }\n}","import React, { Component } from \"react\";\nimport { Stage, Layer } from \"react-konva\";\nimport * as Tiles from './Tiles.js';\n\nclass TileMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mouse_down: false,\n    };\n  }\n\n  getTile (col, row) {\n    return this.props.tiles[row * this.props.cols + col]\n  }\n\n  drawTiles () {\n    let tiles = new Array(this.props.cols).fill(null).map((empty, c) => {\n      return new Array(this.props.rows).fill(null).map((empty, r) => {\n        let tile = this.getTile(c, r);\n        return (\n          <Tiles.TextTile\n            key={`${c}-${r}`}\n            x={c * this.props.tile_size}\n            y={r * this.props.tile_size}\n            character={tile.character}\n            color={tile.color}\n            tile_size={this.props.tile_size}\n            mouse_down={this.state.mouse_down}\n            onUpdateTile={this.handleUpdateTile.bind(this)}\n          />\n        )\n      })\n    })\n    return tiles;\n  }\n\n  floodFillUtil (cols, rows, tiles, x, y, prev_tile, new_tile)\n  {\n    let current_tile = tiles[y * cols + x];\n    // Base cases \n    if (x < 0 || x >= cols || y < 0 || y >= rows) { return tiles; }\n    if (JSON.stringify(current_tile) !== JSON.stringify(prev_tile)) { return tiles; }\n    \n    // Replace the color at (x, y) \n    tiles[y * cols + x] = JSON.parse(JSON.stringify(new_tile));\n    \n    // Recur for north, east, south and west \n    this.floodFillUtil(cols, rows, tiles, x + 1, y, prev_tile, new_tile);\n    this.floodFillUtil(cols, rows, tiles, x - 1, y, prev_tile, new_tile);\n    this.floodFillUtil(cols, rows, tiles, x, y + 1, prev_tile, new_tile);\n    this.floodFillUtil(cols, rows, tiles, x, y - 1, prev_tile, new_tile);\n\n    return tiles;\n  }\n\n  // It mainly finds the previous color on (x, y) and \n  floodFill (cols, rows, tiles, x, y, new_tile)\n  {\n    let prev_tile = tiles[y * cols + x]\n    return this.floodFillUtil(cols, rows, tiles, x, y, prev_tile, new_tile);\n  } \n\n  handleUpdateTile (x, y) {\n    const col = x / this.props.tile_size;\n    const row = y / this.props.tile_size;\n    let tiles = JSON.parse(JSON.stringify(this.props.tiles)); // cheap deep clone\n\n    switch (this.props.tool_in_use) {\n      case 'pencil':\n        tiles[row * this.props.cols + col] = ({\n          type: 1,\n          character: this.props.selected_tile.character,\n          color: this.props.selected_tile.color,\n          data: JSON.stringify(this.props.selected_tile.data),\n        });\n        break;\n      case 'eraser':\n        tiles[row * this.props.cols + col] = ({ ...this.props.empty_tile })\n        break;\n      case 'filler':\n        if (JSON.stringify(tiles[row * this.props.cols + col]) !== JSON.stringify(this.props.selected_tile)) {\n          tiles = this.floodFill(this.props.cols, this.props.rows, tiles, col, row, this.props.selected_tile)\n        }\n        break;\n      default:\n        tiles[row * this.props.cols + col] = ({\n          type: 1,\n          character: this.props.selected_tile.character,\n          color: this.props.selected_tile.color,\n        });\n    }\n    this.props.onUpdateTiles(tiles)\n  }\n\n  handleMouseDown () {\n    this.setState({mouse_down: true})\n  }\n\n  handleMouseUp () {\n    this.setState({mouse_down: false})\n  }\n\n  render() {\n    return (\n      <div className='TileMap'>\n        <Stage \n          width={this.props.cols * this.props.tile_size} \n          height={this.props.rows * this.props.tile_size}\n          onMouseDown={this.handleMouseDown.bind(this)} \n          onMouseUp={this.handleMouseUp.bind(this)}\n        >\n          <Layer>\n            {\n              this.drawTiles().map((tile) => {\n                return tile;\n              })\n            }\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n}\n\nexport default TileMap;\n","import React, { Component } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { SketchPicker } from 'react-color';\n\nclass TileForm extends Component {\n  constructor(props) {\n    super(props);\n    let tile_to_edit = this.props.editing_tile_id ? this.props.tiles.filter((tile) => tile.id === this.props.editing_tile_id)[0] : null\n    let tile_label = tile_to_edit ? tile_to_edit.label : '';\n    let tile_character = tile_to_edit ? tile_to_edit.character : '';\n    let tile_color = tile_to_edit ? tile_to_edit.color : '#fff';\n    let tile_data = tile_to_edit ? JSON.stringify(tile_to_edit.data) : '';\n    \n    this.state = {\n      tile_label,\n      tile_character,\n      tile_color,\n      tile_data,\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  handleColorChange (color, event) {\n    this.setState({tile_color: color.hex})\n  }\n\n  onSubmit () {\n    let new_tile = {\n      label: this.state.tile_label,\n      character: this.state.tile_character,\n      color: this.state.tile_color,\n    }\n\n    try {\n      new_tile.data = JSON.parse(this.state.tile_data);\n    } catch(e) {\n      new_tile.data = this.state.tile_data;\n    }\n    \n    if (this.props.editing_tile_id) {\n      this.props.handleEditTile(new_tile, this.props.editing_tile_id)\n    } else {\n      this.props.handleAddTile(new_tile);\n    }\n  }\n\n  render() {\n    return (\n      <div className='TileForm'>\n        <div className='form row'>\n          <TextField\n            id=\"tile-label\"\n            label=\"Label\"\n            className={'text-field'}\n            defaultValue={this.state.tile_label}\n            onChange={this.handleChange('tile_label')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <TextField\n            id=\"tile-character\"\n            label=\"Character\"\n            className={'text-field'}\n            defaultValue={this.state.tile_character}\n            onChange={this.handleChange('tile_character')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <div className='form-label'>Color</div>\n          <SketchPicker \n            width='initial'\n            color={this.state.tile_color}\n            onChangeComplete={this.handleColorChange.bind(this)}\n          />\n          <br />\n          <TextField\n            id=\"tile-data\"\n            label=\"Data\"\n            placeholder='{\n              type: tree\n            }'\n            multiline\n            defaultValue={this.state.tile_data}\n            onChange={this.handleChange('tile_data')}\n            className={'text-field'}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <Button \n            variant=\"outlined\" \n            color=\"primary\" \n            className='btn-full-width'\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n            </i>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TileForm;","import React from \"react\";\n\nconst TilePreview = ({ character, color}) => (\n  <div className='TilePreview'>\n    <span style={{color}}>\n      {character}\n    </span>\n  </div>\n);\n\nexport default TilePreview;","import React, { Component } from \"react\";\nimport TileForm from './TileForm';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport TilePreview from './TilePreview';\n\nconst TilePlate = ({ id, label, color, character, data, handleSwapSelectedTile, handleCloseForm, handleRemoveTile, handleToggleEdit}) => (\n  <div className='TilePlate'>\n    <Button \n      variant=\"contained\" \n      color=\"primary\"\n      onClick={() => {\n        handleSwapSelectedTile({character, color, data})\n        handleCloseForm();\n      }}\n    >\n      {label}\n    </Button>\n    <span className=\"actions\">\n      <Button \n        color=\"secondary\" \n        aria-label=\"remove tile\"\n        onClick={() => {handleRemoveTile(id)}}\n      >\n        <i className=\"material-icons\">\n          delete\n        </i>\n      </Button>\n      <Button \n        color=\"secondary\" \n        aria-label=\"edit tile\"\n        onClick={() => {handleToggleEdit(id)}}\n      >\n        <i className=\"material-icons\">\n          edit\n        </i>\n      </Button>\n    </span>\n  </div>\n)\n\nclass TilePalette extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tiles: [\n        {\n          id: 1,\n          label: 'land',\n          color: '#298',\n          character: 'L',\n          data: {type: 'province', owner: 'Oda'}\n        },\n        {\n          id: 2,\n          label: 'water',\n          color: '#ace',\n          character: '~',\n          data: {type: 'natural', owner: 'none'}\n        },\n        {\n          id: 3,\n          label: 'mountain',\n          color: '#bbb',\n          character: 'M',\n          data: {type: 'natural', owner: 'none'}\n        },\n        {\n          id: 4,\n          label: 'army',\n          color: '#f44',\n          character: '@',\n          data: {type: 'troop', owner: 'Oda'}\n        },\n      ],\n      form_is_visible: false,\n      editing_tile_id: null,\n    };\n  }\n\n  drawTilePlates () {\n    return this.state.tiles.map((tile, index) => {\n      return (\n        <TilePlate \n          key={index}\n          id={tile.id}\n          label={tile.label}\n          color={tile.color}\n          character={tile.character}\n          data={{...tile.data}}\n          handleSwapSelectedTile={this.props.handleSwapSelectedTile}\n          handleCloseForm={this.handleCloseForm.bind(this)}\n          handleRemoveTile={this.handleRemoveTile.bind(this)}\n          handleToggleEdit={this.handleToggleEdit.bind(this)}\n        />\n      )\n    })\n  }\n\n  handleToggleForm () {\n    this.setState({form_is_visible: !this.state.form_is_visible})\n  }\n\n  handleCloseForm () {\n    this.setState({ form_is_visible: false, editing_tile_id: null})\n  }\n\n  handleToggleEdit (editing_tile_id) {\n    this.setState({ editing_tile_id, form_is_visible: false,}, () => {this.setState({form_is_visible: true})})\n  }\n\n  handleAddTile (new_tile) {\n    let tiles = [...this.state.tiles];\n    let next_id = tiles.length > 0 ? tiles[tiles.length - 1].id + 1 : 1;\n    let tile_id = {id: next_id};\n    this.setState({\n      tiles: tiles.concat({ ...tile_id, ...new_tile }),\n      form_is_visible: false,\n    })\n    this.props.handleSwapSelectedTile(new_tile)\n  }\n  \n  handleEditTile (new_tile, id) {\n    let tiles = [...this.state.tiles].map((tile) => {\n      if (tile.id === id) {\n        new_tile.id = id;\n        return {...id, ...new_tile}\n      } else {\n        return tile\n      }\n    });\n    this.setState({\n      tiles,\n      form_is_visible: false,\n      editing_tile_id: null,\n    })\n    this.props.handleSwapSelectedTile(new_tile)\n  }\n\n  handleRemoveTile (id) {\n    let tiles = this.state.tiles.filter((tile) => tile.id !== id);\n    this.setState({\n      tiles,\n      form_is_visible: false,\n      editing_tile_id: null,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"TilePalette tool-pane\">\n        <Grid container spacing={24}>\n          <Grid item xs={12} sm={8}>\n            <h5>Palette</h5>\n            {this.drawTilePlates()}\n          </Grid>\n          <Grid item xs={12} sm={4}>\n            <h5>Current Tile</h5>\n            <TilePreview character={this.props.selected_tile.character} color={this.props.selected_tile.color} />\n          </Grid>\n        </Grid>\n        <br />\n        <Button \n          variant=\"outlined\" \n          color=\"default\" \n          className='btn-full-width'\n          onClick={this.handleToggleForm.bind(this)}\n        >\n          {\n            (this.state.form_is_visible)\n            ? (\n                <i className=\"material-icons\">\n                  close\n                </i>\n            )\n            : (\n                <i className=\"material-icons\">\n                  add\n                </i>\n            )\n          }\n        </Button>\n        {\n          this.state.form_is_visible && \n          (\n            <TileForm \n              tiles={this.state.tiles}\n              editing_tile_id={this.state.editing_tile_id}\n              handleEditTile={this.handleEditTile.bind(this)}\n              handleAddTile={this.handleAddTile.bind(this)}\n            />\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default TilePalette;","import React, { Component } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nclass LayerForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      layer_name: '',\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n\n  onSubmit () {\n    let new_layer = {\n      name: this.state.layer_name,\n    }\n    this.setState({layer_name: ''})\n    this.props.handleAddLayer(new_layer);\n  }\n\n  render() {\n    return (\n      <div className='LayerForm'>\n        <div className='form row'>\n          <TextField\n            id=\"layer-name\"\n            label=\"Name\"\n            className={'text-field'}\n            value={this.state.layer_name}\n            onChange={this.handleChange('layer_name')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <Button \n            variant=\"outlined\" \n            color=\"primary\" \n            className='btn-full-width'\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n            </i>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LayerForm;","import React, { Component } from \"react\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport LayerForm from './LayerForm';\n\nclass LayerPlate extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      layer_name: props.layer.name,\n      is_editing: false,\n    }\n  }\n\n  handleChange = name => event => {\n    this.setState({\n      [name]: event.target.value,\n    });\n  };\n\n  toggleEdit (value) {\n    this.setState({is_editing: value})\n  }\n\n  onSubmit() {\n    this.setState({ layer_name: '', is_editing: false })\n    this.props.handleEditLayer(this.props.layer.id, this.state.layer_name)\n  }\n\n  render () {\n    if (this.state.is_editing) {\n      return (\n        <div className='layer-edit-form'>\n          <TextField\n            id=\"layer-name\"\n            label=\"Name\"\n            className={'text-field'}\n            value={this.state.layer_name}\n            onChange={this.handleChange('layer_name')}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n                </i>\n          </Button>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={() => {this.toggleEdit(false)}}\n          >\n            <i className=\"material-icons\">\n              close\n            </i>\n          </Button>\n        </div>\n      )\n    }\n    return (\n      <div className='LayerPlate'>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            this.props.handleSwapLayer(this.props.layer.id)\n          }}\n        >\n          {this.props.layer.name}\n        </Button>\n        {\n          this.props.layer.deletable && (\n            <span className=\"actions\">\n              <Button\n                color=\"secondary\"\n                aria-label=\"remove layer\"\n                onClick={() => { this.props.handleRemoveLayer(this.props.layer.id) }}\n              >\n                <i className=\"material-icons\">\n                  delete\n                </i>\n              </Button>\n              <Button\n                color=\"secondary\"\n                aria-label=\"edit layer\"\n                onClick={() => {this.toggleEdit(true)}}\n              >\n                <i className=\"material-icons\">\n                  edit\n                </i>\n              </Button>\n            </span>\n          )\n        }\n      </div>\n    )\n  }\n}\n\nclass Layers extends Component {\n\n  render() {\n    return (\n      <div className=\"Layers tool-pane\">\n        <h4>Layers</h4>\n        {this.props.layers.map((layer, index) => {\n          return (\n            <div key={index} className={index === this.props.current_layer ? 'layer-selected' : ''}>\n              <LayerPlate \n                layer={layer}\n                handleSwapLayer={this.props.handleSwapLayer}\n                handleRemoveLayer={this.props.handleRemoveLayer}\n                handleEditLayer={this.props.handleEditLayer}\n              />\n            </div>\n          )\n        })}\n        <hr/>\n        <LayerForm handleAddLayer={this.props.handleAddLayer}/>\n      </div>\n    );\n  }\n}\n\nexport default Layers;","import React, { Component } from \"react\";\n\nclass RegionViewer extends Component {\n  render() {\n    return (\n      <div className=\"RegionViewer tool-pane\">\n        <h4>Regions</h4>\n      </div>\n    );\n  }\n}\n\nexport default RegionViewer;","import React, { Component } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grow from '@material-ui/core/Grow';\n\nclass Settings extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cols: props.cols,\n      rows: props.rows,\n      grid_min: 1,\n      grid_max: 50,\n    }\n  }\n\n  handleGridChange = name => event => {\n    let new_size = parseInt(event.target.value) ? parseInt(event.target.value) : this.state.grid_min;\n    this.setState({\n      [name]: new_size,\n    }, () => {\n      if (new_size < this.state.grid_min) {\n        this.setState({[name]: this.state.grid_min})\n      } else if (new_size > this.state.grid_max) {\n        this.setState({[name]: this.state.grid_max})\n      }\n    });\n  };\n\n  onSubmit () {\n    let cols = this.state.cols\n    let rows = this.state.rows\n    if (cols !== this.props.cols || rows !== this.props.rows) {\n      let tiles = [];\n      new Array(cols).fill(this.props.empty_tile).map((empty, r) => {\n        return new Array(rows).fill(this.props.empty_tile).map((empty, c) => {\n          tiles.push(JSON.parse(JSON.stringify(this.props.empty_tile)))\n        })\n      })\n      this.props.onUpdateGridSize(cols, rows, tiles);\n    }\n  }\n\n  render() {\n    return (\n      <div className='Settings tool-pane'>\n        <div className='form row'>\n          <div className='inline-group'>\n            <TextField\n              id=\"cols\"\n              label=\"cols\"\n              className={'text-field grid-field'}\n              value={this.state.cols}\n              onChange={this.handleGridChange('cols')}\n              margin=\"normal\"\n              variant=\"outlined\"\n              type=\"number\"\n            />\n            <TextField\n              id=\"rows\"\n              label=\"Rows\"\n              className={'text-field grid-field'}\n              value={this.state.rows}\n              onChange={this.handleGridChange('rows')}\n              margin=\"normal\"\n              variant=\"outlined\"\n              type=\"number\"\n            />\n          </div>\n          {\n            (this.props.cols !== this.state.cols || this.props.rows !== this.state.rows)\n            ? (\n              <Grow in={this.props.cols !== this.state.cols || this.props.rows !== this.state.rows}>\n                <p className=\"red-text\">\n                  WARNING\n                  This action will clear the current grid of all tiles\n                </p>\n              </Grow>\n            )\n            : (\n              null\n            )\n          }\n          <Button \n            variant=\"outlined\" \n            color=\"primary\" \n            className='btn-full-width'\n            onClick={this.onSubmit.bind(this)}\n          >\n            <i className=\"material-icons\">\n              save\n            </i>\n          </Button>\n          <br />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Settings;","import React, { Component } from \"react\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport TilePalette from './TilePalette';\nimport Layers from './Layers';\nimport RegionViewer from './RegionViewer';\nimport Settings from \"./Settings\";\n\nclass ToolPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0,\n    };\n  }\n\n  handleChange = (event, value) => {\n    this.setState({ value });\n  };\n\n  render() {\n    return (\n      <div className=\"ToolPanel\">\n        <AppBar className='tool-tabs' position=\"static\">\n          <Tabs variant=\"fullWidth\" value={this.state.value} onChange={this.handleChange}>\n            <Tab label=\"Palette\" />\n            <Tab label=\"Layers\" />\n            <Tab label=\"Regions\" />\n            <Tab label=\"Settings\" />\n          </Tabs>\n        </AppBar>\n        {/* {this.state.value === 0 && <TilePalette handleSwapSelectedTile={this.props.handleSwapSelectedTile}/>}\n        {this.state.value === 1 && <RegionViewer />} */}\n        <span className={this.state.value === 0 ? '' : 'hidden'}>\n          <TilePalette \n            handleSwapSelectedTile={this.props.handleSwapSelectedTile}\n            selected_tile={this.props.selected_tile}\n          />\n        </span>\n        <span className={this.state.value === 1 ? '' : 'hidden'}>\n          <Layers \n            layers={this.props.layers}\n            current_layer={this.props.current_layer}\n            handleAddLayer={this.props.handleAddLayer}\n            handleSwapLayer={this.props.handleSwapLayer}\n            handleRemoveLayer={this.props.handleRemoveLayer}\n            handleEditLayer={this.props.handleEditLayer}\n          />\n        </span>\n        <span className={this.state.value === 2 ? '' : 'hidden'}>\n          <RegionViewer />\n        </span>\n        <span className={this.state.value === 3 ? '' : 'hidden'}>\n          <Settings\n            cols={this.props.cols} \n            rows={this.props.rows} \n            tiles={this.props.tiles} \n            empty_tile={this.props.empty_tile} \n            onUpdateGridSize={this.props.onUpdateGridSize}\n          />\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default ToolPanel;","import React, { Component } from \"react\";\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nexport class Toolbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      can_hotkey: false,\n    }\n  }\n\n  render() {\n    return (\n      <div className='Toolbar'>\n        <Tooltip title='pencil'>\n          <Button \n            className='btn-tool' \n            onClick={() => {this.props.onToolSwitch('pencil')}} \n            variant={this.props.tool_in_use === 'pencil' ? 'contained' : 'outlined'}\n            color=\"secondary\"\n          >\n            <i className=\"material-icons\">\n              edit\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='eraser'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onToolSwitch('eraser')}}  \n            variant={this.props.tool_in_use === 'eraser' ? 'contained' : 'outlined'} \n            color=\"secondary\"\n          >\n            <i className=\"material-icons\">\n              indeterminate_check_box\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='fill'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onToolSwitch('filler')}}  \n            variant={this.props.tool_in_use === 'filler' ? 'contained' : 'outlined'} \n            color=\"secondary\"\n          >\n            <i className=\"material-icons\">\n              format_color_fill\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='box paint'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onToolSwitch('box_paint')}} \n            variant={this.props.tool_in_use === 'box_paint' ? 'contained' : 'outlined'} \n            color=\"secondary\"\n            disabled\n          >\n            <i className=\"material-icons\">\n              select_all\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='undo'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onUndo()}}  \n            variant='contained'\n            color=\"secondary\"\n            disabled={this.props.tile_history_index >= this.props.tile_history.length - 1}\n          >\n            <i className=\"material-icons\">\n              undo\n            </i>\n          </Button>\n        </Tooltip>\n        <Tooltip title='redo'>\n          <Button \n            className='btn-tool' \n            onClick={() => { this.props.onRedo()}}  \n            variant='contained'\n            color=\"secondary\"\n            disabled={this.props.tile_history_index <= 0}\n          >\n            <i className=\"material-icons\">\n              redo\n            </i>\n          </Button>\n        </Tooltip>\n      </div>\n    );\n  }\n}\n\nexport default Toolbar","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, HashRouter } from 'react-router-dom';\nimport { AnimatedSwitch } from 'react-router-transition';\nimport './App.scss';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport JsonView from './Components/JsonView';\nimport TileMap from './Components/TileMap';\nimport ToolPanel from './Components/ToolPanel';\nimport GridToolbar from './Components/Toolbar';\nimport Grid from '@material-ui/core/Grid';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    const cols = 36;\n    const rows = 20;\n    const tile_size = 32;\n    const tile_gutter = 8;\n    const empty_tile = { type: 0, character: '', color: 'white', data: null };\n    const tiles = new Array(cols * rows).fill({ ...empty_tile })\n\n    this.state = {\n      default_cols: cols,\n      default_rows: rows,\n      tile_size,\n      tile_gutter,\n      empty_tile,\n      tile_history_max: 10,\n      selected_tile: {\n        character: '#',\n        color: '#fff',\n        data: null,\n      },\n      tool_in_use: 'pencil',\n      layers: [\n        {\n          id: 1,\n          name: 'Base',\n          cols,\n          rows,\n          tiles,\n          tile_history: [JSON.stringify(tiles)],\n          tile_history_index: 0,\n          deletable: false,\n        },\n        {\n          id: 2,\n          name: 'Base 2',\n          cols,\n          rows,\n          tiles,\n          tile_history: [JSON.stringify(tiles)],\n          tile_history_index: 0,\n          deletable: true,\n        },\n      ],\n      current_layer: 0,\n    }\n  }\n\n  handleToolSwitch (tool_in_use) {\n    this.setState({tool_in_use});\n  }\n\n  handleUndo () {\n    let tile_history_index = this.state.layers[this.state.current_layer].tile_history_index + 1\n    let tiles = JSON.parse(this.state.layers[this.state.current_layer].tile_history[tile_history_index])\n    let layers = [...this.state.layers];\n    layers[this.state.current_layer].tiles = tiles;\n    layers[this.state.current_layer].tile_history_index = tile_history_index;\n    this.setState({\n      layers\n    })\n  }\n  \n  handleRedo () {\n    let tile_history_index = this.state.layers[this.state.current_layer].tile_history_index - 1\n    let tiles = JSON.parse(this.state.layers[this.state.current_layer].tile_history[tile_history_index])\n    let layers = [...this.state.layers];\n    layers[this.state.current_layer].tiles = tiles;\n    layers[this.state.current_layer].tile_history_index = tile_history_index;\n    this.setState({\n      layers\n    })\n  }\n\n  handleSwapSelectedTile (selected_tile_properties) {\n    let tool_in_use = this.state.tool_in_use === 'eraser' ? 'pencil' : this.state.tool_in_use\n    this.setState({selected_tile: selected_tile_properties, tool_in_use});\n  }\n\n  handleUpdateTiles (tiles) {\n    let tile_history = [JSON.stringify(tiles), ...this.state.layers[this.state.current_layer].tile_history].slice(this.state.layers[this.state.current_layer].tile_history_index, this.state.tile_history_max)\n    let layers = [...this.state.layers];\n    layers[this.state.current_layer].tile_history_index = 0;\n    layers[this.state.current_layer].tiles = tiles;\n    layers[this.state.current_layer].tile_history = tile_history;\n    \n    this.setState({\n      layers\n    })\n  }\n  \n  handleUpdateGridSize (cols, rows, tiles) {\n    let layers = [...this.state.layers];\n    layers[this.state.current_layer].cols = cols;\n    layers[this.state.current_layer].rows = rows;\n    layers[this.state.current_layer].tiles = tiles;\n\n    this.setState({\n      layers\n    })\n  }\n\n  handleAddLayer (new_layer) {\n    const tiles = new Array(this.state.default_cols * this.state.default_rows).fill({ ...this.state.empty_tile });\n    \n    let layers = [...this.state.layers];\n    let next_id = layers.length > 0 ? layers[layers.length - 1].id + 1 : 1;\n    new_layer.id = next_id;\n    new_layer.tiles = tiles;\n    new_layer.cols = this.state.default_cols;\n    new_layer.rows = this.state.default_rows;\n    new_layer.tile_history = [JSON.stringify(tiles)];\n    new_layer.tile_history_index = 0;\n    new_layer.deletable = true;\n\n    layers = layers.concat(new_layer);\n    this.setState({layers},\n      () => {\n        this.handleSwapLayer(next_id);\n      }\n    );\n  }\n\n  handleSwapLayer(id) {\n    this.setState({current_layer: id - 1})\n  }\n\n  handleRemoveLayer(id) {\n    let layers = [...this.state.layers].filter((layer) => layer.id !== id);\n    this.setState({layers, current_layer: 0});\n  }\n\n  handleEditLayer(id, name) {\n    let layers = [...this.state.layers].map((layer) => {\n      if (layer.id === id) {\n        layer.name = name;\n      }\n      return layer;\n    });\n    this.setState({layers});\n\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"App\">\n          <AppBar className=\"NavBar\" position=\"static\">\n            <Toolbar>\n              <h5 className=\"nav-title\" onClick={() => { window.location = '#/' }}>ASCII Map Maker</h5>\n              <GridToolbar \n                onToolSwitch={this.handleToolSwitch.bind(this)}\n                onUndo={this.handleUndo.bind(this)}\n                onRedo={this.handleRedo.bind(this)}\n                tile_history={this.state.layers[this.state.current_layer].tile_history}\n                tile_history_index={this.state.layers[this.state.current_layer].tile_history_index}\n                selected_tile={this.state.selected_tile}\n                tool_in_use={this.state.tool_in_use}\n              />\n              <div className='nav-buttons-right'>\n                <Button color=\"inherit\" onClick={() => {window.location = '#/export'}}>Export</Button>\n              </div>\n            </Toolbar>\n          </AppBar>\n          <AnimatedSwitch\n            atEnter={{ opacity: 0 }}\n            atLeave={{ opacity: 0 }}\n            atActive={{ opacity: 1 }}\n            className=\"fade\"\n          >\n            <Route exact path={'/'} render={(props) => (\n              <Grid container >\n                <Grid item xs={12} sm={8}>\n                  <TileMap\n                    cols={this.state.layers[this.state.current_layer].cols}\n                    rows={this.state.layers[this.state.current_layer].rows}\n                    tiles={this.state.layers[this.state.current_layer].tiles}\n                    tile_size={32}\n                    tile_gutter={8}\n                    selected_tile={{ ...this.state.selected_tile }}\n                    onUpdateTiles={this.handleUpdateTiles.bind(this)}\n                    tool_in_use={this.state.tool_in_use}\n                    empty_tile={this.state.empty_tile}\n                  />\n                </ Grid>\n                <Grid item xs={12} sm={4}>\n                  <ToolPanel \n                    layers={this.state.layers}\n                    current_layer={this.state.current_layer}\n                    cols={this.state.layers[this.state.current_layer].cols}\n                    rows={this.state.layers[this.state.current_layer].rows}\n                    tiles={this.state.layers[this.state.current_layer].tiles}\n                    empty_tile={this.state.empty_tile}\n                    selected_tile={this.state.selected_tile}\n                    handleSwapSelectedTile={this.handleSwapSelectedTile.bind(this)} \n                    handleAddLayer={this.handleAddLayer.bind(this)} \n                    handleSwapLayer={this.handleSwapLayer.bind(this)} \n                    handleRemoveLayer={this.handleRemoveLayer.bind(this)} \n                    handleEditLayer={this.handleEditLayer.bind(this)} \n                    onUpdateGridSize={this.handleUpdateGridSize.bind(this)} \n                  />\n                </ Grid>\n              </ Grid>\n            )} />\n            <Route path={'/export'} render={\n              (props) => (\n                <JsonView \n                  cols={this.state.layers[this.state.current_layer].cols}\n                  rows={this.state.layers[this.state.current_layer].rows}\n                  tiles={this.state.layers[this.state.current_layer].tiles} \n                />\n              )} \n            />\n          </AnimatedSwitch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}